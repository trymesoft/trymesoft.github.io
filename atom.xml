<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Star Wang</title>
  <icon>https://www.gravatar.com/avatar/13a05b1c3501d56e3910ce7b38f002a3</icon>
  <subtitle>To see the new world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tryme.wang/"/>
  <updated>2019-02-28T03:27:17.359Z</updated>
  <id>https://tryme.wang/</id>
  
  <author>
    <name>Star Wang</name>
    <email>tryme.wang@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Typecho 相关改动</title>
    <link href="https://tryme.wang/2019/02/typecho-changes/"/>
    <id>https://tryme.wang/2019/02/typecho-changes/</id>
    <published>2019-02-27T16:53:49.000Z</published>
    <updated>2019-02-28T03:27:17.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录 Typecho 或其主题有关改动。</p></blockquote><h3 id="评论显示-User-Agent"><a href="#评论显示-User-Agent" class="headerlink" title="评论显示 User Agent"></a>评论显示 User Agent</h3><p>使用插件实现，插件<a href="https://github.com/ennnnny/typecho" target="_blank" rel="noopener">地址</a>。</p><ol><li>下载后将其上传到网站根目录下的 <code>usr/plugins</code> 文件夹并解压，内含两个插件。</li><li><p>这时可以登录网站管理后台配置并启用：<img src="https://ws4.sinaimg.cn/large/007jb4T5gy1g0lytvuu4aj30ue0nkwfp.jpg" alt="image" align="center"></p></li><li><p>修改评论页面代码，配置 UA 显示位置，<code>Handsome</code> 主题修改主题根目录下的 <code>component/comments.php</code>，大致位置如下：</p><p><img src="https://wx2.sinaimg.cn/large/007jb4T5ly1g0lyz7p3itj318g0ckq5u.jpg" alt="image" align="center"></p></li><li><p>查看评论效果：</p><p><img src="https://ws2.sinaimg.cn/large/007jb4T5ly1g0lz14o2ksj30qw06q3yt.jpg" alt="image" align="center"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录 Typecho 或其主题有关改动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;评论显示-User-Agent&quot;&gt;&lt;a href=&quot;#评论显示-User-Agent&quot; class=&quot;headerlink&quot; title=&quot;评论显示 Us
      
    
    </summary>
    
      <category term="工具" scheme="https://tryme.wang/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Typecho" scheme="https://tryme.wang/tags/Typecho/"/>
    
  </entry>
  
  <entry>
    <title>项目中的一致性哈希使用</title>
    <link href="https://tryme.wang/2019/02/consistency-hash-usage/"/>
    <id>https://tryme.wang/2019/02/consistency-hash-usage/</id>
    <published>2019-02-19T12:53:49.000Z</published>
    <updated>2019-02-27T09:38:08.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一致性哈希算法是分布式系统常用的算法，分布式系统每个节点都有可能失效，并且新的节点很可能动态的增加进来，所以，当节点发生变化时，上面的数据要保持尽可能小的振荡，一致性哈希算法容错性及可扩展性很高。</p></blockquote><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><blockquote><p>项目中使用了客户端与服务端的长连接，考虑到服务的可用性，必然要使用负载均衡，但是最常见的 Nginx 是 HTTP 的负载均衡与反向代理服务器，长连接的负载均衡还需要其他的解决方案。</p></blockquote><p>最终选用了 ZooKeeper 及一致性哈希算法分配节点，具体实现如下：</p><ol><li>项目启动时在 ZooKeeper 集群中创建一个节点并同步初始化哈希环（保证哈希环节点和服务器节点同步）；</li><li>客户端连接时，使用同一种 Hash 函数计算出该客户端对应的 Hash 值来分配节点，返回该客户端连接的具体节点信息并保存到 Redis 中，防止重复分配，定时过期重新分配；</li><li>当哈希环中的某个节点宕机时，根据配置好的 Watcher，进行哈希环节点更新操作；</li><li>当新增节点时，重复步骤 1。</li></ol><blockquote><p><code>Watcher</code>：ZooKeeper 支持一种 Watch 操作，Client 可以在某个 ZNode 上设置一个 Watcher，来 Watch 该 ZNode 上的变化。如果该 ZNode 上有相应的变化，就会触发这个 Watcher，把相应的事件通知给设置 Watcher 的 Client。需要注意的是，ZooKeeper 中的 Watcher 是一次性的，即触发一次就会被取消，如果想继续 Watch 的话，需要客户端重新设置 Watcher。</p></blockquote><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>ZooKeeper 初始化及创建节点伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        zk = <span class="keyword">new</span> ZooKeeper(conf.getConnectionStr(), conf.getSessionTimeout(), <span class="keyword">new</span> ZookeeperWatcher());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == zk.exists(conf.getZkNode(), <span class="keyword">true</span>)) &#123;</span><br><span class="line">            zk.create(conf.getZkNode(), <span class="string">""</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNode</span><span class="params">(String node, String parentNode)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"zookeeper创建节点 =&gt; &#123;&#125;"</span>, node);</span><br><span class="line">    zk.create(parentNode + <span class="string">"/"</span> + node, <span class="string">""</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的 ZookeeperWatcher，：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"注册中心收到事件 =&gt; &#123;&#125;"</span>, event);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (KeeperState.SyncConnected == event.getState() &amp;&amp; <span class="keyword">null</span> == event.getPath()) &#123;</span><br><span class="line">            logger.info(<span class="string">"已连接zookeeper服务器"</span>);</span><br><span class="line">            cdl.countDown();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EventType.NodeChildrenChanged == event.getType()) &#123;</span><br><span class="line">            logger.info(<span class="string">"节点 &#123;&#125; &#123;&#125;"</span>, event.getPath(), <span class="string">"的子节点发生变更..."</span>);</span><br><span class="line">            <span class="keyword">if</span> (!conf.getZkNode().equals(event.getPath())) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;String&gt; children = regCenter.getChild();</span><br><span class="line">            logger.info(<span class="string">"更新哈希环列表 =&gt; &#123;&#125;"</span>, children);</span><br><span class="line">            ConsistencyHash.init(children);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一致性哈希算法的初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真实服务器信息+虚拟节点服务器信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> TreeMap&lt;Long, String&gt; nodes = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真实服务器节点信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; shards = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置虚拟节点数目(每个真实负载节点同时存在的虚拟节点)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> VIRTUAL_NUM = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化一致性 hash 环</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shards 真实服务器节点信息列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(List&lt;String&gt; shards)</span> </span>&#123;</span><br><span class="line">    TreeMap&lt;Long, String&gt; nodes = <span class="keyword">new</span> TreeMap&lt;Long, String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shards.size(); i++) &#123;</span><br><span class="line">        String shardInfo = shards.get(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; VIRTUAL_NUM; j++) &#123;</span><br><span class="line">            nodes.put(hash(computeMd5(<span class="string">"SHARD-"</span> + i + <span class="string">"-NODE-"</span> + j), j),</span><br><span class="line">                    shardInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ConsistencyHash.nodes = nodes;</span><br><span class="line">    ConsistencyHash.shards = shards;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 key 的 hash 值分配节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据key的hash值取得服务器节点信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getShardInfo</span><span class="params">(<span class="keyword">long</span> hash)</span> </span>&#123;</span><br><span class="line">    Long key = hash;</span><br><span class="line">    SortedMap&lt;Long, String&gt; tailMap = nodes.tailMap(key);</span><br><span class="line">    <span class="keyword">if</span> (tailMap.isEmpty()) &#123;</span><br><span class="line">        key = nodes.firstKey();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        key = tailMap.firstKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodes.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实测，分配 10 万个 key，大致可以均匀分布在 3 个节点上。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ZooKeeper 集群至少 3 台，才能保证不低于一半节点工作，ZooKeeper 的主要作用是在动态添加或者节点宕机时无需手动或代码侵入的同步哈希环，通过其内部的 Watcher 机制即可方便的实现。</p><p>一致性哈希算法是分配节点信息的主算法，在分布式环境节点变化时防止某个节点负载突然变大并且尽可能的均匀分配。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一致性哈希算法是分布式系统常用的算法，分布式系统每个节点都有可能失效，并且新的节点很可能动态的增加进来，所以，当节点发生变化时，上面的数据要保持尽可能小的振荡，一致性哈希算法容错性及可扩展性很高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="工作记录" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Java" scheme="https://tryme.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一致性哈希算法</title>
    <link href="https://tryme.wang/2019/02/consistency-hash/"/>
    <id>https://tryme.wang/2019/02/consistency-hash/</id>
    <published>2019-02-19T04:53:49.000Z</published>
    <updated>2019-02-27T09:36:25.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>开发项目中用到了一致性哈希算法，并未系统总结过相关知识，趁此机会总结下。</p></blockquote><p><strong>一致哈希</strong> 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 <code>K/n</code>  个关键字重新映射，其中 <code>K</code> 是关键字的数量，<code>n</code> 是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。  –<strong>Wikipedia</strong></p><p>通俗点说，<code>一致性哈希算法</code>是分布式系统中常见的算法，一个分布式的存储系统，要将数据存储到各个节点上，如果采用普通的 Hash 方法，将数据映射到具体的节点上，如 key%N，key 是数据的值，N 是机器节点数，分布式系统每个节点都有可能失效，并且新的节点很可能动态的增加进来，这样的话普通的哈希取模算法会造成缓存的巨大振荡，几乎所有的数据映射都会无效。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>如下图，一个 Hash 环上值空间为 0 - 2<sup>32</sup> ，按顺时针方向组合，上有 A、B、C、D 四个 Hash 出来的节点。</p><p><img src="https://wx1.sinaimg.cn/large/007jb4T5ly1g0f6utlwm5j30md0m3tcj.jpg" alt="image" align="center"></p><p>当定位某个 key 的位置时，使用相同的 Hash 函数计算出哈希值，并按顺时针找到相应节点区间，顺时针的下一节点即为其相应的服务器。</p><p>假设有 Object A、Object B、Object C、Object D 四个 key，在使用同样的 Hash 函数计算后，其位置如下图：</p><p><img src="http://wx3.sinaimg.cn/large/007jb4T5ly1g0f70dkog9j30kq0ljgre.jpg" alt="image" align="center"></p><p>则顺时针寻找，Object A会被定为到 Node A 上，Object B 被定为到 Node B 上，Object C 被定为到 Node C 上，Object D 被定为到 Node D 上。</p><p>此时如若节点 C 宕机，则只会影响节点 B 到 C 之间的数据，其被定位到 D 节点上，而 A、B、D 上的原数据不会被影响，具有较好的容错性。</p><p>如果是新加一个节点 X，如下图：</p><p>​<img src="https://wx2.sinaimg.cn/large/007jb4T5ly1g0f7608hekj30kl0l3wkx.jpg" alt="image" align="center"></p><p>受影响的数据为节点 B 到 C 之间的，具有良好的可扩展性。</p><h3 id="Hash-环的数据倾斜问题"><a href="#Hash-环的数据倾斜问题" class="headerlink" title="Hash 环的数据倾斜问题"></a>Hash 环的数据倾斜问题</h3><p>当 Hash 环上节点数量较少时，很可能会发生很多数据被定位到其中一台上，其他节点数据极少的情况，如下图：</p><p><img src="https://wx4.sinaimg.cn/large/007jb4T5ly1g0f78hrmmfj30cc0d5dfy.jpg" alt="image" align="center"></p><p>可以引入虚拟节点，即每台服务器虚拟出几个节点，这样可以尽可能的均匀分布，如下图：</p><p><img src="https://wx4.sinaimg.cn/large/007jb4T5ly1g0f7c6edj1j30k00kbaaj.jpg" alt="image" align="center"></p><p>参考：<a href="https://zhuanlan.zhihu.com/p/34985026" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34985026</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;开发项目中用到了一致性哈希算法，并未系统总结过相关知识，趁此机会总结下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="https://tryme.wang/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客搜索的问题</title>
    <link href="https://tryme.wang/2019/01/hexo-search-problem/"/>
    <id>https://tryme.wang/2019/01/hexo-search-problem/</id>
    <published>2019-01-17T02:53:49.000Z</published>
    <updated>2019-01-17T07:54:06.956Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理 Hexo 博客时，发现页面搜索功能不好用，之前一直是没有问题的，点击“搜索”后，页面中间总是显示加载，如图：</p><p><img src="https://wx3.sinaimg.cn/large/007jb4T5ly1fz9lvnvye7j30lk08mjrw.jpg" alt="image" align="center"></p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>首先尝试重装插件，搜索插件如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.6.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    "hexo-generator-search": "^2.2.1",</span><br><span class="line">    "hexo-generator-searchdb": "^1.0.8",</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将搜索的插件重装之后貌似还是不行，失败！</p><p>之后怀疑是配置的问题，查了下插件<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">开发者</a>使用方法：</p><p><img src="https://ws4.sinaimg.cn/large/007jb4T5ly1fz9m12iixlj31fe0o20x4.jpg" alt="image" align="center"></p><p>对照自己的配置，也无问题，失败！</p><p>后来，联想到搜索将内容输出到了根目录的 <code>search.xml</code> 文件中，直接本地调试访问 <a href="http://localhost:4000/search.xml，发现了报错：" target="_blank" rel="noopener">http://localhost:4000/search.xml，发现了报错：</a></p><p><img src="https://wx2.sinaimg.cn/large/007jb4T5ly1fz9m560vgxj31xu0gkwlq.jpg" alt="image" align="center"></p><p>果然有问题，去查看 <code>157行 335列</code>：</p><p><img src="https://ws2.sinaimg.cn/large/007jb4T5ly1fz9mcshvxej31a40huq5x.jpg" alt="image" align="center"></p><p>卧槽，多了个红点，估计是复制的时候多了什么奇怪的东西，将原文复制到 <code>Sublime Text</code> 中查看，发现果然是有东西：</p><p><img src="https://wx2.sinaimg.cn/large/007jb4T5ly1fz9mg50d3lj30q903nwex.jpg" alt="image" align="center"></p><p>不知道哪里来的😢，删除后重新调试，一切正常🙃！</p><p>参考：<a href="https://www.itfanr.cc/2017/11/24/resolve-hexo-blog-search-exception/" target="_blank" rel="noopener">IT范儿</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;整理 Hexo 博客时，发现页面搜索功能不好用，之前一直是没有问题的，点击“搜索”后，页面中间总是显示加载，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/large/007jb4T5ly1fz9lvnvye
      
    
    </summary>
    
      <category term="工具" scheme="https://tryme.wang/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="https://tryme.wang/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 连接的问题</title>
    <link href="https://tryme.wang/2019/01/mysql-connect-problem/"/>
    <id>https://tryme.wang/2019/01/mysql-connect-problem/</id>
    <published>2019-01-16T12:18:27.000Z</published>
    <updated>2019-01-17T06:45:06.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>某个项目启动时超慢，启动到一半进程自动停掉，有的时候十分钟才能启动，重复测试后发现是数据库连接的问题。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>Spring Framework 整合 Druid 配置 DataSource</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"25200000"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL 5.7</p></li></ul><hr><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>异常日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">The last packet successfully received from the server was <span class="number">540</span>,<span class="number">992</span> milliseconds ago.  The last packet sent successfully to the server was <span class="number">540</span>,<span class="number">993</span> milliseconds ago.</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="number">411</span>)</span><br><span class="line">at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:<span class="number">1117</span>)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.nextRowFast(MysqlIO.java:<span class="number">2144</span>)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.nextRow(MysqlIO.java:<span class="number">1900</span>)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.readSingleRowSet(MysqlIO.java:<span class="number">3390</span>)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.getResultSet(MysqlIO.java:<span class="number">483</span>)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.readResultsForQueryOrUpdate(MysqlIO.java:<span class="number">3096</span>)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.readAllResults(MysqlIO.java:<span class="number">2266</span>)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:<span class="number">2687</span>)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:<span class="number">2719</span>)</span><br><span class="line">at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:<span class="number">2155</span>)</span><br><span class="line">at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:<span class="number">1379</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:<span class="number">2931</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:<span class="number">440</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:<span class="number">2929</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:<span class="number">440</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:<span class="number">2929</span>)</span><br><span class="line">at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:<span class="number">118</span>)</span><br><span class="line">at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:<span class="number">493</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:<span class="number">62</span>)</span><br><span class="line">at com.sun.proxy.$Proxy32.execute(Unknown Source)</span><br><span class="line">at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:<span class="number">59</span>)</span><br><span class="line">at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:<span class="number">73</span>)</span><br><span class="line">at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:<span class="number">60</span>)</span><br><span class="line">at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:<span class="number">267</span>)</span><br><span class="line">at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:<span class="number">137</span>)</span><br><span class="line">at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:<span class="number">96</span>)</span><br><span class="line">at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:<span class="number">77</span>)</span><br><span class="line">at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="number">108</span>)</span><br><span class="line">at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="number">102</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:<span class="number">358</span>)</span><br><span class="line">... <span class="number">84</span> more</span><br><span class="line">Caused by: java.io.EOFException: Can not read response from server. Expected to read <span class="number">4</span> bytes, read <span class="number">0</span> bytes before connection was unexpectedly lost.</span><br><span class="line">at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:<span class="number">3017</span>)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.nextRowFast(MysqlIO.java:<span class="number">1985</span>)</span><br><span class="line">... <span class="number">120</span> more</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">14</span>:<span class="number">40</span>:<span class="number">03</span>,<span class="number">649</span> ERROR [com.alibaba.druid.pool.DruidDataSource] - create connection error</span><br><span class="line">com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure</span><br><span class="line"></span><br><span class="line">The last packet sent successfully to the server was <span class="number">0</span> milliseconds ago. The driver has not received any packets from the server.</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="number">411</span>)</span><br><span class="line">at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:<span class="number">1117</span>)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.&lt;init&gt;(MysqlIO.java:<span class="number">350</span>)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:<span class="number">2393</span>)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:<span class="number">2430</span>)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:<span class="number">2215</span>)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:<span class="number">813</span>)</span><br><span class="line">at com.mysql.jdbc.JDBC4Connection.&lt;init&gt;(JDBC4Connection.java:<span class="number">47</span>)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class="number">45</span>)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">423</span>)</span><br><span class="line">at com.mysql.jdbc.Util.handleNewInstance(Util.java:<span class="number">411</span>)</span><br><span class="line">at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:<span class="number">399</span>)</span><br><span class="line">at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:<span class="number">334</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:<span class="number">148</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:<span class="number">786</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterEventAdapter.connection_connect(FilterEventAdapter.java:<span class="number">38</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:<span class="number">142</span>)</span><br><span class="line">at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:<span class="number">211</span>)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:<span class="number">142</span>)</span><br><span class="line">at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:<span class="number">1360</span>)</span><br><span class="line">at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:<span class="number">1414</span>)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:<span class="number">1649</span>)</span><br><span class="line">Caused by: java.net.ConnectException: <span class="function">Connection <span class="title">refused</span> <span class="params">(Connection refused)</span></span></span><br><span class="line"><span class="function">at java.net.PlainSocketImpl.<span class="title">socketConnect</span><span class="params">(Native Method)</span></span></span><br><span class="line"><span class="function">at java.net.AbstractPlainSocketImpl.<span class="title">doConnect</span><span class="params">(AbstractPlainSocketImpl.java:<span class="number">350</span>)</span></span></span><br><span class="line"><span class="function">at java.net.AbstractPlainSocketImpl.<span class="title">connectToAddress</span><span class="params">(AbstractPlainSocketImpl.java:<span class="number">206</span>)</span></span></span><br><span class="line"><span class="function">at java.net.AbstractPlainSocketImpl.<span class="title">connect</span><span class="params">(AbstractPlainSocketImpl.java:<span class="number">188</span>)</span></span></span><br><span class="line"><span class="function">at java.net.SocksSocketImpl.<span class="title">connect</span><span class="params">(SocksSocketImpl.java:<span class="number">392</span>)</span></span></span><br><span class="line"><span class="function">at java.net.Socket.<span class="title">connect</span><span class="params">(Socket.java:<span class="number">589</span>)</span></span></span><br><span class="line"><span class="function">at java.net.Socket.<span class="title">connect</span><span class="params">(Socket.java:<span class="number">538</span>)</span></span></span><br><span class="line"><span class="function">at java.net.Socket.&lt;init&gt;<span class="params">(Socket.java:<span class="number">434</span>)</span></span></span><br><span class="line"><span class="function">at java.net.Socket.&lt;init&gt;<span class="params">(Socket.java:<span class="number">244</span>)</span></span></span><br><span class="line"><span class="function">at com.mysql.jdbc.StandardSocketFactory.<span class="title">connect</span><span class="params">(StandardSocketFactory.java:<span class="number">257</span>)</span></span></span><br><span class="line"><span class="function">at com.mysql.jdbc.MysqlIO.&lt;init&gt;<span class="params">(MysqlIO.java:<span class="number">300</span>)</span></span></span><br><span class="line"><span class="function">... 21 more</span></span><br><span class="line"><span class="function">2019-01-16 14:40:03,666 ERROR [com.alibaba.druid.pool.DruidDataSource] - create connection error</span></span><br><span class="line"><span class="function">com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure</span></span><br></pre></td></tr></table></figure><p>日志中可以看出是数据库连接的问题</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="数据库层面"><a href="#数据库层面" class="headerlink" title="数据库层面"></a>数据库层面</h4><p>查阅资料发现是应用打开数据库连接后，操作数据库时，连接超时被 MySQL 关闭了，查看 MySQL <a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_wait_timeout" target="_blank" rel="noopener">官方文档</a>，查看超时配置：</p><p><img src="https://wx1.sinaimg.cn/large/007jb4T5ly1fz8ofw8ni0j318q0mudjy.jpg" alt="image" align="center"></p><p>可以更改 MySQL 配置文件将改属性值扩大，或者直接使用 <code>set</code> 命令而无需重启数据库。</p><h4 id="应用配置层面"><a href="#应用配置层面" class="headerlink" title="应用配置层面"></a>应用配置层面</h4><p>将 <code>DruidDataSource</code> 中的属性 <code>testOnBorrow(申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。)</code>、<code>testOnReturn(归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。)</code>改为 <code>true</code>，重启应用即可。</p><p>将数据库连接 URL 后加上 <code>autoReconnect=true</code>，当连接断开时自动重连。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;某个项目启动时超慢，启动到一半进程自动停掉，有的时候十分钟才能启动，重复测试后发现是数据库连接的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="https://tryme.wang/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>测试环境 MySQL 版本升级导致的一些问题</title>
    <link href="https://tryme.wang/2019/01/mysql-upgrade-problems/"/>
    <id>https://tryme.wang/2019/01/mysql-upgrade-problems/</id>
    <published>2019-01-14T09:03:15.000Z</published>
    <updated>2019-01-14T09:05:16.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>某些项目的创建时间字段需要精确到<code>毫秒</code>级，该字段类型是 <code>timestamp</code>，参考 MySQL 5.7 <a href="https://dev.mysql.com/doc/refman/5.7/en/date-and-time-types.html" target="_blank" rel="noopener">官方文档</a>，<code>0</code> 在日期相关字段中的含义不同，如下表：</p><table><thead><tr><th style="text-align:center">Data Type</th><th style="text-align:center">“Zero” Value</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:center">“0000-00-00”</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">“00:00:00”</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">“0000-00-00 00:00:00”</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">“0000-00-00 00:00:00”</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:center">0000</td></tr></tbody></table><p>由此，可以看到无论是 <code>DATETIME</code> 还是 <code>TIMESTAMP</code> 字段属性，默认都是精确到秒的。</p><p>查阅资料发现，可以通过 <code>TIMESTAMP(n)</code> 来指定精确度，实际修改中发现当前数据库版本是 <code>5.5</code>，执行字段类型更改时一直报错，但是在 <code>5.7</code> 版本中可以正常修改字段类型，后将数据库更新到 <code>5.7</code> 版本，emm…，迎来升级的同时，小问题也是不少。</p><hr><h3 id="问题及解决"><a href="#问题及解决" class="headerlink" title="问题及解决"></a>问题及解决</h3><h4 id="mysql-user-表结构的改变"><a href="#mysql-user-表结构的改变" class="headerlink" title="mysql.user 表结构的改变"></a>mysql.user 表结构的改变</h4><p><code>5.5</code> 和 <code>5.7</code> 版本的 <code>mysql.user</code> 表结构不同（暂不仔细探讨），导致项目中需要连接 MySQL 数据库的地方全部认证失败 <code>Access denied for test@192.168.53.6</code>，但是，该表中的数据全部正常，内网全部可连接，尝试重置密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> <span class="string">'test@192.168.%.%'</span> = <span class="keyword">password</span>(<span class="string">'test666'</span>);</span><br></pre></td></tr></table></figure><p>执行报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1805 (HY000): Column count of mysql.user is wrong. </span><br><span class="line">Expected 42, found 49. The table is probably corrupted</span><br></pre></td></tr></table></figure><p>查询资料发现，是数据库升级导致的，两个版本的表结构不同，只好执行升级命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_upgrade -u root -p</span><br></pre></td></tr></table></figure><p>输入 <code>root</code> 密码等待执行完毕之后再更改密码，SQL 语句执行成功，再刷新权限即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h4 id="GROUP-BY-问题"><a href="#GROUP-BY-问题" class="headerlink" title="GROUP BY 问题"></a>GROUP BY 问题</h4><p>日志报错：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'test.user.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by;</span><br></pre></td></tr></table></figure><p>可以看到是 <code>sql_mode=only_full_group_by</code> 的问题，查看<a href="https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_only_full_group_by" target="_blank" rel="noopener">官方文档</a>，发现默认的 <code>sql_mode</code> 中有 <code>only_full_group_by</code>，该配置导致 <code>GROUP BY</code> 后的列必须在 <code>SELECT</code> 的列中。</p><p>执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@sql_mode;</span><br></pre></td></tr></table></figure><p>查看当前 <code>sql_mode</code>，将 <code>only_full_group_by</code> 删除即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;某些项目的创建时间字段需要精确到&lt;code&gt;毫秒&lt;/code&gt;级，该字段类型是 &lt;code&gt;timestamp&lt;/code&gt;，参考 MySQ
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="https://tryme.wang/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf 的缓存导致热部署的问题</title>
    <link href="https://tryme.wang/2019/01/idea-hotswap-thymeleaf-cache/"/>
    <id>https://tryme.wang/2019/01/idea-hotswap-thymeleaf-cache/</id>
    <published>2019-01-12T08:55:00.000Z</published>
    <updated>2019-01-12T09:10:55.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用 IDEA 热部署项目时，之前的项目配置完成后，页面文件改动或者 Java 文件改动都能即时热部署，但是在公司一个项目中，热部署突然失效，折腾了半天😭。</p></blockquote><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>因为要接手一个项目，在部署调试的过程中，发现页面的热部署在 IDEA 中不好用，当页面中的代码更改时，无论是 IDEA 手动 update 还是失去焦点，虽然出发了热部署，但是页面文件分明有了改动，但是总是提示 <code>Loaded classes are up to date.Nothing to reload</code>，很是奇怪🤔，后来改动 Java 文件，热部署没问题，真是哔了🐶了。</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>开始以为是自己配置配置的问题，可之前的项目也是这么配置的，有问题早就暴露出来了，不应该是配置的问题。</p><p>在 <code>Dont&#39;t be evil --- Google</code> 的网站上遨游了一番，找了好多答案都不是想要的，终于在下班前夕被我找到了😎，答案在<a href="https://stackoverflow.com/questions/50395971/unable-to-hotswap-html-file-in-intellij-with-tomcat-9" target="_blank" rel="noopener">这里</a>。</p><p><img src="https://ws1.sinaimg.cn/large/007jb4T5ly1fz3wesnr3xj311q0ea422.jpg" alt="image" align="center"></p><p>原来是 <code>Thymeleaf</code> 的缓存😂，赶紧去查看配置文件，发现了 <code>Thymeleaf</code> 的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.templateresolver.ServletContextTemplateResolver"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheTTLMs"</span> <span class="attr">value</span>=<span class="string">"#&#123;60*60*1000&#125;"</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>都是这个 <code>cacheable</code> 的锅，改为 <code>false</code> ，重启后一切正常，又能愉快的玩耍了😊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;使用 IDEA 热部署项目时，之前的项目配置完成后，页面文件改动或者 Java 文件改动都能即时热部署，但是在公司一个项目中，热部署突然失效，折腾了半天😭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; 
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="工具" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDEA" scheme="https://tryme.wang/tags/IDEA/"/>
    
      <category term="Thymeleaf" scheme="https://tryme.wang/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 事务捕获异常后无法回滚</title>
    <link href="https://tryme.wang/2019/01/transaction-not-rollback/"/>
    <id>https://tryme.wang/2019/01/transaction-not-rollback/</id>
    <published>2019-01-08T11:25:00.000Z</published>
    <updated>2019-01-12T09:11:53.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="当前配置"><a href="#当前配置" class="headerlink" title="当前配置"></a>当前配置</h3><p>由于项目是 SSM 框架整合而成，MySQL 的事务配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事务管理配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--切面配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--AOP 配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--把事务控制在 Service 层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"allServiceMethod"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">"execution(* com.test.*.service..*.*(..))"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"allServiceMethod"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启注解方式配置事物 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>在一个事务管理的接口，方法抛出了 <code>NullPointerException</code> 异常，但是有关数据库表的操作却没有回滚，伪代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   noticeMapper.insert(notice);</span><br><span class="line">   noticeLogMapper.insert(noticeLog);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    LOGGER.error(<span class="string">"数据插入异常！！！"</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在 <code>noticeLog</code> 的插入过程中代码抛出了异常，但是 <code>notice</code> 却成功的插入到了数据库，相当于这个明明被事务管理的方法在遇到程序异常却没有回滚事务🤔。 </p><p>查阅文档及资料，在 Spring <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html#transaction-declarative-rolling-back" target="_blank" rel="noopener">官方文档</a>中有解释：</p><p><img src="https://ws3.sinaimg.cn/large/007jb4T5ly1fz3v3a1rpej31gw10ealk.jpg" alt="image" align="center"></p><p>注意中间红框段落，翻译一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In its default configuration, the Spring Framework’s transaction infrastructure code marks a transaction for rollback only in the case of runtime, unchecked exceptions. That is, when the thrown exception is an instance or subclass of RuntimeException. ( Error instances also, by default, result in a rollback). Checked exceptions that are thrown from a transactional method do not result in rollback in the default configuration. </span><br><span class="line"></span><br><span class="line">在其默认配置中，Spring Framework的事务基础结构代码仅在运行时未经检查的异常情况下标记回滚事务。也就是说，抛出的异常是RuntimeException的实例或子类。 （默认情况下，错误实例也会导致回滚）。从事务方法抛出的已检查异常不会导致在默认配置中回滚。</span><br></pre></td></tr></table></figure><p>可以看到代码抛出 RuntimeException 的实例、子类或在默认情况下的 Error 才会导致回滚，<code>但是，从事务方法抛出的已检查异常不会导致在默认配置中回滚。</code></p><p>所以代码中 <code>try catch</code> 捕获了异常，导致了事务无法回滚(⊙x⊙)。</p><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>既然代码的异常被捕获后事务无法回滚，那么可以手动抛出 <code>RuntimeException</code> 的实例或子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   noticeMapper.insert(notice);</span><br><span class="line">   noticeLogMapper.insert(noticeLog);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    LOGGER.error(<span class="string">"数据插入异常！！！"</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>既然事务没有自动回滚，我们可以手动设置事务的回滚：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   noticeMapper.insert(notice);</span><br><span class="line">   noticeLogMapper.insert(noticeLog);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    LOGGER.error(<span class="string">"数据插入异常！！！"</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>再次调试运行后，事务正常回滚😊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;当前配置&quot;&gt;&lt;a href=&quot;#当前配置&quot; class=&quot;headerlink&quot; title=&quot;当前配置&quot;&gt;&lt;/a&gt;当前配置&lt;/h3&gt;&lt;p&gt;由于项目是 SSM 框架整合而成，MySQL 的事务配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight x
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="https://tryme.wang/tags/MySQL/"/>
    
      <category term="Spring" scheme="https://tryme.wang/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>大版本更新上线问题汇总</title>
    <link href="https://tryme.wang/2019/01/new-version-problems/"/>
    <id>https://tryme.wang/2019/01/new-version-problems/</id>
    <published>2019-01-03T17:15:40.000Z</published>
    <updated>2019-01-04T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tomcat-容器启动问题"><a href="#Tomcat-容器启动问题" class="headerlink" title="Tomcat 容器启动问题"></a>Tomcat 容器启动问题</h3><blockquote><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><ol><li>Spring Boot 版本 2.0.3.RELEASE</li><li>druid-spring-boot-starter 版本 1.1.9</li><li>mysql-connector-java 版本 5.1.46</li><li>MySQL 数据库版本 5.7</li><li>Tomcat 版本 7.0.67（最终升级了版本到 Tomcat 8）</li><li>JDK 版本 1.7（最终升级到1.8）</li></ol></blockquote><hr><p><strong>问题：</strong> 测试、生产配置文件属性不同步，生产环境很多属性未配置，导致错误注入。<br><strong>解决：</strong> 将所有注入的 API 地址同步。</p><hr><p><strong>问题：</strong> 启动时 Dubbo 报错，找不到服务。</p><p><strong>解决：</strong> 提供者所在机器 Dubbo 端口未开放，开放对应端口即可。</p><hr><p><strong>问题：</strong> Tomcat 无法启动，每次启动报不同的错误。</p><p><strong>解决：</strong> JDK版本升级到 1.8→Tomcat 版本升级到 7.0.92</p><hr><p><strong>问题：</strong> java.lang.NoClassDefFoundError: javax/el/ELManager</p><p><strong>解决：</strong><a href="https://tryme.wang/archives/201811/springboot-war-problem.html">参考</a></p><hr><p><strong>问题：</strong></p><p>配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL数据源配置</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line"><span class="attr">      url:</span> <span class="string">jdbc\:mysql\://rds.xxx.com\:3306/xxx?useUnicode\=true&amp;characterEncoding\=UTF-8&amp;zeroDateTimeBehavior\=convertToNull</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><p>异常信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.sql.SQLException: connect error, url jdbc\:mysql\:<span class="comment">//rds.xxx.com\:3306/xxx?useUnicode\=true&amp;characterEncoding\=UTF-8&amp;zeroDateTimeBehavior\=convertToNull, driverClass com.mysql.jdbc.Driver</span></span><br><span class="line">at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:<span class="number">1582</span>)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:<span class="number">859</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:<span class="number">1833</span>)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:<span class="number">1776</span>)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1704</span>)</span><br><span class="line">... <span class="number">116</span> more</span><br></pre></td></tr></table></figure><p><strong>解决：</strong> 异常信息里非常明确的提及是数据库连接 url 的问题，在 Spring Boot  的 yml 配置文件中，格式为：<code>property: value</code> 属性名称加「:」之后有一个空格，项目之前的配置文件中 MySQL 数据库的连接地址转义过，这里直接复制过来使用，是行不通的，将转义字符「\」去掉即可。</p><hr><h3 id="Tomcat-重启之后异常"><a href="#Tomcat-重启之后异常" class="headerlink" title="Tomcat 重启之后异常"></a>Tomcat 重启之后异常</h3><p><strong>问题：</strong></p><p>异常信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.session.StandardManager doLoad</span><br><span class="line">SEVERE: IOException <span class="keyword">while</span> loading persisted sessions: java.io.EOFException</span><br><span class="line">java.io.EOFException</span><br><span class="line">    at java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:<span class="number">2298</span>)</span><br><span class="line">    at java.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:<span class="number">2767</span>)</span><br><span class="line">    at java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:<span class="number">798</span>)</span><br><span class="line">    at java.io.ObjectInputStream.&lt;init&gt;(ObjectInputStream.java:<span class="number">298</span>)</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">org.apache.catalina.session.StandardManager startInternal</span><br><span class="line">SEVERE: Exception loading sessions from persistent storage</span><br><span class="line">java.io.EOFException</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p><strong>解决：</strong> 删除 <code> ${catalina.home}/work/Catalina/localhost/${APP-NAME}/SESSION.ser</code> 即可</p><hr><p><strong>问题：</strong> Dubbo 报错</p><p>报错信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">52</span>,<span class="number">387</span> [DubboSaveRegistryCache-thread-<span class="number">1</span>] WARN  [com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry] -  [DUBBO] Failed to save registry store file, cause: Can not lock the registry cache file /root/.dubbo/dubbo-registry-<span class="number">10.11</span>.12.13.cache, ignore and retry later, maybe multi java process use the file, please config: dubbo.registry.file=xxx.properties, dubbo version: <span class="number">2.5</span>.3, current host: <span class="number">10.20</span>.30.40</span><br><span class="line">java.io.IOException: Can not lock the registry cache file /root/.dubbo/dubbo-registry-<span class="number">10.11</span>.12.13.cache, ignore and retry later, maybe multi java process use the file, please config: dubbo.registry.file=xxx.properties</span><br><span class="line">        at com.alibaba.dubbo.registry.support.AbstractRegistry.doSaveProperties(AbstractRegistry.java:<span class="number">193</span>)</span><br><span class="line">        at com.alibaba.dubbo.registry.support.AbstractRegistry$SaveProperties.run(AbstractRegistry.java:<span class="number">150</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1145</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">615</span>)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure><p>Dubbo 会使用文件缓存注册中心地址列表及服务提供者列表，默认路径在 <code>/${user.home}/.dubbo/dubbo-registry-10.20.30.40.cache</code>，应用重启时将基于此文件恢复，一台服务器有多个应用使用这个文件恢复时，会出现这个警告。</p><p><strong>解决：</strong> 可以在每个项目 Dubbo 配置文件中的 <code><a href="dubbo:registry" target="_blank" rel="noopener">dubbo:registry</a></code> 标签中的 file 指定不同的文件路径。 <a href="http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-registry.html" target="_blank" rel="noopener">官方文档</a> <a href="https://github.com/apache/incubator-dubbo/issues/81" target="_blank" rel="noopener">参考地址</a></p><hr><p><strong>问题：</strong> Tomcat 容器无日志输出<br>logback-spring.xml配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- 测试环境+开发环境. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"test,dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.xxx.im"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.xxx.im"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><strong>解决：</strong> 生产环境日志输出级别过高，<code>INFO</code> 级别的无法输出，将  <code>ERROR</code> 改为 <code>INFO</code> 即可。</p><hr><blockquote><p>转战华为云之后🙂</p></blockquote><h3 id="RabbitMQ-连接"><a href="#RabbitMQ-连接" class="headerlink" title="RabbitMQ 连接"></a>RabbitMQ 连接</h3><blockquote><p>Spring Boot 版本 <code>2.0.3.RELEASE</code></p></blockquote><p><strong>问题：</strong> RabbitMQ 直接使用 yaml 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">rabbitmq.xxx.com</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">password123456</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure><p> 项目启动时报错信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    ...ForgivingExceptionHandler - <span class="function">An unexpected connection driver error <span class="title">occured</span> <span class="params">(Exception message: Connection closed)</span></span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure><p><strong>解决：</strong> 从异常日志中可以很明显的看到，是 <code>Connection closed</code>，解决思路如下：</p><ol><li><p>初步判断当前机器无法连通 RabbitMQ 所在机器，使用  <code>ping rabbitmq.xxx.com</code> 命令可以 ping 通 RabbitMQ 所在机器，并且  <code>telnet rabbitmq.xxx.com 5672</code> 也是可以连通的，排除此原因；</p></li><li><p>确认 <code>username、password</code> 准确性，发现 RabbitMQ 是新装的，使用命令查看其用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbit ~]<span class="comment"># rabbitmqctl list_users</span></span><br><span class="line">Listing users ...</span><br><span class="line">admin   [administrator]</span><br></pre></td></tr></table></figure><p>发现并没有 <code>user</code> 这个用户，创建用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbit ~]<span class="comment"># rabbitmqctl add_user user password123456</span></span><br><span class="line">Creating user <span class="string">"user"</span> ...</span><br></pre></td></tr></table></figure><p>设置为管理员：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbit ~]<span class="comment"># rabbitmqctl set_user_tags user administrator</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">"user"</span> to [administrator] ...</span><br></pre></td></tr></table></figure><p>此时，使用该用户登录 RabbitMQ WEB 端管理页面后查看该用户信息：<br><img src="https://ws3.sinaimg.cn/large/007jb4T5ly1fyfu2m6sjbj315w0vmgou.jpg" alt="image" align="center"><br>点击 <code>Set permission</code> 配置权限，重启项目后问题解决。</p></li></ol><hr><h3 id="Tomcat-问题"><a href="#Tomcat-问题" class="headerlink" title="Tomcat 问题"></a>Tomcat 问题</h3><p><strong>问题：</strong> 启动 Tomcat 容器报错信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apache.tomcat.jni.Error: <span class="number">70023</span>: This function has not been implemented on <span class="keyword">this</span> platform</span><br><span class="line">        at org.apache.tomcat.jni.SSL.initialize(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br></pre></td></tr></table></figure><p><strong>解决：</strong> 修改 <code>$TOMCAT_HOME/conf/server.xml</code> 中的 <code>&lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;off&quot; /&gt;</code> 即可解决。</p><h3 id="Tomcat-问题-1"><a href="#Tomcat-问题-1" class="headerlink" title="Tomcat 问题"></a>Tomcat 问题</h3><p><strong>问题：</strong> 启动 Tomcat 容器报错信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.apache.tomcat.jni.Error: <span class="number">70023</span>: This function has not been implemented on <span class="keyword">this</span> platform</span><br><span class="line">        at org.apache.tomcat.jni.SSL.initialize(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br></pre></td></tr></table></figure><p><strong>解决：</strong> 修改 <code>$TOMCAT_HOME/conf/server.xml</code> 中的 <code>&lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;off&quot; /&gt;</code> 即可解决。</p><h3 id="线上问题处理"><a href="#线上问题处理" class="headerlink" title="线上问题处理"></a>线上问题处理</h3><p><strong>问题：</strong> </p><blockquote><p>MongoDB 版本：TokuMX 2.0.2 | MongoDB 2.4</p><p>spring-data-mongodb 版本：1.4.1.RELEASE</p><p>spring-data-commons 版本：1.7.2.RELEASE</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: You have to provide at least one property to sort by!</span><br><span class="line">        at org.springframework.data.domain.Sort.&lt;init&gt;(Sort.java:<span class="number">91</span>)</span><br><span class="line">        at org.springframework.data.domain.Sort.&lt;init&gt;(Sort.java:<span class="number">79</span>)</span><br><span class="line">    ...</span><br><span class="line">        at sun.reflect.GeneratedMethodAccessor415.invoke(Unknown Source)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:<span class="number">606</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>解决：</strong> 异常信息很明确，未提供排序的属性，检查代码，异常代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line">...</span><br><span class="line">   Query query = <span class="keyword">new</span> Query();</span><br><span class="line">List&lt;String&gt; sortStrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (...) &#123;</span><br><span class="line">   sortStrList.add(<span class="string">"property"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">query.with(<span class="keyword">new</span> Sort(Sort.Direction.DESC, sortStrList.toArray(<span class="keyword">new</span> String[sortStrList.size()])))</span><br><span class="line">   mongoTemplate.find(query, Xxx.class);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>很明显，排序属性集合 <code>sortStrList</code> 中有可能没有任何属性，再查看 <code>org.springframework.data.domain.Sort</code> 中的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sort</span><span class="params">(Sort.Direction direction, String... properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(direction, (List)(properties == <span class="keyword">null</span> ? <span class="keyword">new</span> ArrayList() : Arrays.asList(properties)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sort</span><span class="params">(Sort.Direction direction, List&lt;String&gt; properties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (properties != <span class="keyword">null</span> &amp;&amp; !properties.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.orders = <span class="keyword">new</span> ArrayList(properties.size());</span><br><span class="line">        Iterator i$ = properties.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i$.hasNext()) &#123;</span><br><span class="line">            String property = (String)i$.next();</span><br><span class="line">            <span class="keyword">this</span>.orders.add(<span class="keyword">new</span> Sort.Order(direction, property));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You have to provide at least one property to sort by!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，<code>sortStrList</code> 完全无需转换为数组，但这不是主要原因，从下面的构造方法中可以看出，传入的 List 集合不可为空对象并且必须集合大小必须大于 0，所以解决方案可以有多种，只需控制 <code>sortStrList</code> 集合不为空且 size 大于 0，或者根据判断查询不加排序条件也可以解决。</p><hr><p><strong>问题：</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.data.mongodb.UncategorizedMongoDbException: Lock not granted. Try restarting the transaction.; nested exception is com.mongodb.MongoExcep</span><br><span class="line">tion: Lock not granted. Try restarting the transaction.</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoExceptionTranslator.translateExceptionIfPossible(MongoExceptionTranslator.java:<span class="number">83</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.potentiallyConvertRuntimeException(MongoTemplate.java:<span class="number">1828</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:<span class="number">409</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.doUpdate(MongoTemplate.java:<span class="number">995</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.updateFirst(MongoTemplate.java:<span class="number">969</span>)</span><br><span class="line">        ...</span><br><span class="line">        at sun.reflect.GeneratedMethodAccessor378.invoke(Unknown Source)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:<span class="number">606</span>)</span><br><span class="line">        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:<span class="number">317</span>)</span><br><span class="line">        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:<span class="number">183</span>)</span><br><span class="line">        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">150</span>)</span><br><span class="line">        at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:<span class="number">80</span>)</span><br><span class="line">        ...</span><br><span class="line">        at sun.reflect.GeneratedMethodAccessor200.invoke(Unknown Source)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:<span class="number">606</span>)</span><br></pre></td></tr></table></figure><p><strong>解决：</strong> 手动配置的 MongoDB 事务问题，尚未彻底解决。</p><hr><p><strong>问题：</strong> </p><blockquote><p>Spring 整合 MongoDB配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mongoOptions"</span> <span class="attr">class</span>=<span class="string">"com.mongodb.MongoOptions"</span>&gt;</span></span><br><span class="line">&gt; ...</span><br><span class="line">&gt; <span class="comment">&lt;!-- 连接超时时间(毫秒)，默认为4000 --&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectTimeout"</span> <span class="attr">value</span>=<span class="string">"4000"</span> /&gt;</span></span><br><span class="line">&gt; <span class="comment">&lt;!-- socket读写时超时时间(毫秒)，默认为0，不超时 --&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"socketTimeout"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">&gt; <span class="comment">&lt;!-- 是socket连接在防火墙上保持活动的特性，默认为false --&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"socketKeepAlive"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">&gt;     ...</span><br><span class="line">&gt; <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.dao.DataAccessResourceFailureException: can<span class="string">'t say something; nested exception is com.mongodb.MongoException$Network: can'</span>t say something</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoExceptionTranslator.translateExceptionIfPossible(MongoExceptionTranslator.java:<span class="number">56</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.potentiallyConvertRuntimeException(MongoTemplate.java:<span class="number">1828</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:<span class="number">409</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.insertDBObject(MongoTemplate.java:<span class="number">893</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.doInsert(MongoTemplate.java:<span class="number">713</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.insert(MongoTemplate.java:<span class="number">668</span>)</span><br><span class="line">        at org.springframework.data.mongodb.core.MongoTemplate.insert(MongoTemplate.java:<span class="number">659</span>)</span><br><span class="line">        at net.okdi.o2o.core.helper.ExceptionHelper.afterThrow(ExceptionHelper.java:<span class="number">71</span>)</span><br><span class="line">        at sun.reflect.GeneratedMethodAccessor438.invoke(Unknown Source)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:<span class="number">606</span>)</span><br><span class="line">        ...</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1145</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">615</span>)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line">Caused by: com.mongodb.MongoException$Network: can<span class="string">'t say something</span></span><br><span class="line"><span class="string">        at com.mongodb.DBTCPConnector.say(DBTCPConnector.java:194)</span></span><br><span class="line"><span class="string">        at com.mongodb.DBTCPConnector.say(DBTCPConnector.java:155)</span></span><br><span class="line"><span class="string">        at com.mongodb.DBApiLayer$MyCollection.insert(DBApiLayer.java:249)</span></span><br><span class="line"><span class="string">        at com.mongodb.DBApiLayer$MyCollection.insert(DBApiLayer.java:205)</span></span><br><span class="line"><span class="string">        at com.mongodb.DBCollection.insert(DBCollection.java:57)</span></span><br><span class="line"><span class="string">        at com.mongodb.DBCollection.insert(DBCollection.java:100)</span></span><br><span class="line"><span class="string">        at org.springframework.data.mongodb.core.MongoTemplate$8.doInCollection(MongoTemplate.java:898)</span></span><br><span class="line"><span class="string">        at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:407)</span></span><br><span class="line"><span class="string">        ... 44 more</span></span><br><span class="line"><span class="string">Caused by: java.io.IOException: couldn'</span>t connect to [mongodb.xxx.com/<span class="number">192.168</span>.1.22:<span class="number">27017</span>] bc:java.net.SocketTimeoutException: connect timed out</span><br><span class="line">        at com.mongodb.DBPort._open(DBPort.java:<span class="number">214</span>)</span><br><span class="line">        at com.mongodb.DBPort.go(DBPort.java:<span class="number">107</span>)</span><br><span class="line">        at com.mongodb.DBPort.go(DBPort.java:<span class="number">88</span>)</span><br><span class="line">        at com.mongodb.DBPort.findOne(DBPort.java:<span class="number">143</span>)</span><br><span class="line">        at com.mongodb.DBPort.runCommand(DBPort.java:<span class="number">148</span>)</span><br><span class="line">        at com.mongodb.DBPort.checkAuth(DBPort.java:<span class="number">307</span>)</span><br><span class="line">        at com.mongodb.DBTCPConnector.say(DBTCPConnector.java:<span class="number">180</span>)</span><br><span class="line">        ... <span class="number">51</span> more</span><br></pre></td></tr></table></figure><p><strong>解决：</strong> 异常最后很明确的提示了 <code>connect timed out</code> 连接超时的问题，我们可以将 <code>connectTimeout</code> 连接超时属性适当扩大，如果是提示 <code>read timed out</code>，原因是在进行数据操作时过长时间没有返回结果，此时要修改 <code>socketTimeout</code> 属性了。</p><p><a href="https://zyjustin9.iteye.com/blog/2017986" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tomcat-容器启动问题&quot;&gt;&lt;a href=&quot;#Tomcat-容器启动问题&quot; class=&quot;headerlink&quot; title=&quot;Tomcat 容器启动问题&quot;&gt;&lt;/a&gt;Tomcat 容器启动问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;前提&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工作记录" scheme="https://tryme.wang/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot war 包方式启动问题</title>
    <link href="https://tryme.wang/2019/01/spring-boot-war-problems/"/>
    <id>https://tryme.wang/2019/01/spring-boot-war-problems/</id>
    <published>2019-01-03T16:57:40.000Z</published>
    <updated>2019-01-04T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spring Boot 支持 jar 包和 war 包两种打包方式。jar 包方式运行简单，对于轻量的项目，从构造到部署极大的提升了效率；war 包方式对于启动参数、集群配置来说可能更方便一些。在使用 war 包方式的时候遇到了一个问题，记录下来📝。</p></blockquote><h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><ul><li>Spring Boot 版本<code>2.0.3.RELEASE</code></li><li><p>打包方式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- JDK1.8 编码 UTF-8</span><br><span class="line">- 依赖只引入了``` spring-boot-starter-web、spring-boot-starter-test</span><br></pre></td></tr></table></figure></p></li><li><p>Tomcat 版本 7.0.82</p></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>配置好项目及 Tomcat 部署后启动失败，有这么一行异常信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.NoClassDefFoundError: javax/el/ELManager</span><br></pre></td></tr></table></figure></p><h2 id="解决路径"><a href="#解决路径" class="headerlink" title="解决路径"></a>解决路径</h2><h3 id="缺少-jar-包"><a href="#缺少-jar-包" class="headerlink" title="缺少 jar 包"></a>缺少 jar 包</h3><p>第一反应，缺少 jar 包，在 pom 文件引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.el&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.el-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>重新启动后问题仍然存在，加入 <code>&lt;scope&gt;provided&lt;/scope&gt;</code>  后仍然不行，<code>失败</code>。</p><h3 id="hibernate-validator-版本过高"><a href="#hibernate-validator-版本过高" class="headerlink" title="hibernate-validator 版本过高"></a>hibernate-validator 版本过高</h3><p>搜索后有文章说是 <code>当前版本的 Spring Boot，依赖的验证 hibernate-validator 版本太高，导致找不到 ELManager。</code>查看项目依赖树，发现是web 依赖中的<br><img src="https://wx3.sinaimg.cn/large/007jb4T5ly1fxq7hr323fj31ag0n4wj5.jpg" align="center" alt="image"><br>查看其他项目中同样写法并不报错，排除这种原因。</p><h3 id="Tomcat-版本"><a href="#Tomcat-版本" class="headerlink" title="Tomcat 版本"></a>Tomcat 版本</h3><p>有人说 Tomcat7 提供的 el-api.jar 版本是 2.2，Tomcat8 的版本是 3.0，未尝试切换 Tomcat版本。</p><h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p>将下载的 el-api3.0 的 jar 包拷贝到 $TOMCAT_HOME/lib 下替换之前的 el-api.jar 即可。</p><p><code>参考地址：</code><a href="https://stackoverflow.com/questions/45841464/java-lang-noclassdeffounderror-javax-el-elmanager" target="_blank" rel="noopener">stackoverflow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Spring Boot 支持 jar 包和 war 包两种打包方式。jar 包方式运行简单，对于轻量的项目，从构造到部署极大的提升了效率；war 包方式对于启动参数、集群配置来说可能更方便一些。在使用 war 包方式的时候遇到了一个问题，记录下来�
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="https://tryme.wang/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 使用中的小问题总结</title>
    <link href="https://tryme.wang/2019/01/spring-boot-use-problems/"/>
    <id>https://tryme.wang/2019/01/spring-boot-use-problems/</id>
    <published>2019-01-03T15:57:40.000Z</published>
    <updated>2019-01-04T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spring Boot 使用中遇到的问题总结，持续更新…</p></blockquote><h3 id="IDEA-中读取配置文件问题"><a href="#IDEA-中读取配置文件问题" class="headerlink" title="IDEA 中读取配置文件问题"></a>IDEA 中读取配置文件问题</h3><p>问题如图：<br><img src="https://wx4.sinaimg.cn/large/007jb4T5ly1fxrefyccolj30vq06smza.jpg" align="center" alt="image"><br>解决方案：<br>引入如下依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>此时会出现如下图：<br><img src="https://wx3.sinaimg.cn/large/007jb4T5ly1fxrem3cjo3j31dk06idin.jpg" align="center" alt="image"><br>可以直接忽略。</p><hr><h3 id="Tomcat-容器启动过慢的问题"><a href="#Tomcat-容器启动过慢的问题" class="headerlink" title="Tomcat 容器启动过慢的问题"></a>Tomcat 容器启动过慢的问题</h3><p>启动项目时，明明一个很简单的项目，却启动很慢，Tomcat 日志中有这么一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [20,617] milliseconds.</span><br></pre></td></tr></table></figure></p><p>启动成功耗时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO: Server startup in 33239 ms</span><br></pre></td></tr></table></figure></p><p>这个警告的操作耗了大半的启动时间，查阅 Tomcat 的<a href="https://wiki.apache.org/tomcat/HowTo/FasterStartUp" target="_blank" rel="noopener">wiki</a>发现这么一段话：<br><img src="https://wx1.sinaimg.cn/large/007jb4T5ly1fxtkl2jdatj31xs0iqwmv.jpg" align="center" alt="image"><br>解释得很清楚，Tomcat 启动时熵源的生成默认是 JRE 的阻塞式熵源（/ dev / random），替换为非阻塞式熵源（/ dev /./ urandom）即可，但是会降低安全性，因为获得的随机数据较少。<br>修改方式：<br>直接修改 $JAVA_HOME/jre/lib/security/java.security 中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">securerandom.source=file:/dev/./urandom</span><br></pre></td></tr></table></figure></p><p>或者直接执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar app.jar -Djava.security.egd=file:/dev/./urandom</span><br></pre></td></tr></table></figure></p><p>修改完再启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO: Server startup in 10847 ms</span><br></pre></td></tr></table></figure></p><p>效果还是很显著的😊。</p><hr><h3 id="静态变量的注入"><a href="#静态变量的注入" class="headerlink" title="静态变量的注入"></a>静态变量的注入</h3><p>日常开发中，一般常用的工具会抽取到工具类中，工具类中的方法一般都是静态调用的，方法中可能会注入其他成员变量，由于方法是 static 的，所以成员变量也必须是静态的。此时，使用 @Autowired 已经无法注入，此时就需要新的操作了😏。<br>首先，将需要使用的定义为静态变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static RestTemplate restTemplate;</span><br></pre></td></tr></table></figure></p><p>然后生成 set 方法并在方法上加 @Autowired（读取属性文件的话使用 @Value）注解（注意不要加 static）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">    public void setRestTemplate(RestTemplate restTemplate) &#123;</span><br><span class="line">        AuthTokenUtil.restTemplate = restTemplate;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后，类上加上 @Component注解即可。</p><hr><h3 id="RestTemplate-的-GET-请求的-Headers-设置"><a href="#RestTemplate-的-GET-请求的-Headers-设置" class="headerlink" title="RestTemplate 的 GET 请求的 Headers 设置"></a>RestTemplate 的 GET 请求的 Headers 设置</h3><h4 id="RestTemplate-介绍"><a href="#RestTemplate-介绍" class="headerlink" title="RestTemplate 介绍"></a>RestTemplate 介绍</h4><blockquote><p><strong>Spring’s central class for synchronous client-side HTTP access.</strong> It simplifies communication with HTTP servers, and enforces RESTful principles. It handles HTTP connections, leaving application code to provide URLs (with possible template variables) and extract results.</p><p>Spring 的同步客户端 HTTP 访问的中心类。它简化了与 HTTP 服务器的通信，并实施了 RESTful 原则。它处理 HTTP 连接，使应用程序代码提供 URL（带有可能的模板变量）并提取结果。</p></blockquote><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><ul><li>Spring Boot 版本 2.0.3.RELEASE</li><li>spring-web-5.0.7.RELEASE.jar 的 RestTemplate</li><li>RestTemplate 的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.SimpleClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tryme.wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-11-30 10:59:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> RestTemplate配置 </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(factory);</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">simpleClientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 默认情况下，RestTemplate依赖于标准JDK工具来建立HTTP连接。</span></span><br><span class="line"><span class="comment">         * 可以通过InterceptingHttpAccessor.setRequestFactory（org.springframework.http.client.ClientHttpRequestFactory）</span></span><br><span class="line"><span class="comment">         * 属性切换到使用不同的HTTP库，例如Apache HttpComponents，Netty和OkHttp。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        <span class="comment">// 单位：ms</span></span><br><span class="line">        factory.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 单位：ms</span></span><br><span class="line">        factory.setConnectTimeout(<span class="number">15000</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>RestTemplate 使用时可能会有 Headers 中需要传入 token 之类参数的情况，使用 POST 请求时，RestTemplate 的 API 中有明显的方法postForEntity或postForObject：</p><p><img src="https://wx2.sinaimg.cn/large/007jb4T5ly1fy68yplwsxj31fu10qgs8.jpg" align="center" alt="image"></p><p>然而 GET 请求并没有明显可以理解的 API 使用，查阅资料发现了 exchange 方法可以指定 HTTP 请求方式：</p><p><img src="https://wx2.sinaimg.cn/large/007jb4T5ly1fy6979u3i3j31fo0x4n2l.jpg" align="center" alt="image"></p><p>ok，就它了，而且其他请求方式均可以使用这个来执行 Headers。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Spring Boot 使用中遇到的问题总结，持续更新…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;IDEA-中读取配置文件问题&quot;&gt;&lt;a href=&quot;#IDEA-中读取配置文件问题&quot; class=&quot;headerlink&quot; title=&quot;I
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="https://tryme.wang/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>RestTemplate 自定义 ErrorHandler</title>
    <link href="https://tryme.wang/2019/01/resttemplate-errorhandler/"/>
    <id>https://tryme.wang/2019/01/resttemplate-errorhandler/</id>
    <published>2019-01-03T15:45:40.000Z</published>
    <updated>2019-01-04T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在使用 Spring Boot 的 RestTemplate 调用时，发现调用成功时很好用，但是服务器返回 4xx 或者 5xx 异常时，这货直接给抛出来了，想要处理可以自定义 ErrorHandler。</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>当服务端返回非 200 时，调用方直接抛出如下异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.client.HttpClientErrorException: <span class="number">400</span> Bad Request</span><br><span class="line"></span><br><span class="line">at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:<span class="number">94</span>)</span><br><span class="line">at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:<span class="number">79</span>)</span><br><span class="line">at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:<span class="number">63</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:<span class="number">766</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:<span class="number">724</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:<span class="number">680</span>)</span><br><span class="line">at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:<span class="number">466</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>为什么会抛异常呢，可以翻一下源码：<br>RestTemplate 中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">postForEntity</span><span class="params">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException </span>&#123;</span><br><span class="line">        RequestCallback requestCallback = <span class="keyword">this</span>.httpEntityCallback(request, responseType);</span><br><span class="line">        ResponseExtractor&lt;ResponseEntity&lt;T&gt;&gt; responseExtractor = <span class="keyword">this</span>.responseEntityExtractor(responseType);</span><br><span class="line">        <span class="keyword">return</span> (ResponseEntity)nonNull(<span class="keyword">this</span>.execute(url, HttpMethod.POST, requestCallback, responseExtractor, uriVariables));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>继续翻：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String url, HttpMethod method, @Nullable RequestCallback requestCallback, @Nullable ResponseExtractor&lt;T&gt; responseExtractor, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException </span>&#123;</span><br><span class="line">        URI expanded = <span class="keyword">this</span>.getUriTemplateHandler().expand(url, uriVariables);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.doExecute(expanded, method, requestCallback, responseExtractor);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>再往下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doExecute</span><span class="params">(URI url, @Nullable HttpMethod method, @Nullable RequestCallback requestCallback, @Nullable ResponseExtractor&lt;T&gt; responseExtractor)</span> <span class="keyword">throws</span> RestClientException </span>&#123;</span><br><span class="line">        Assert.notNull(url, <span class="string">"URI is required"</span>);</span><br><span class="line">        Assert.notNull(method, <span class="string">"HttpMethod is required"</span>);</span><br><span class="line">        ClientHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Object var14;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClientHttpRequest request = <span class="keyword">this</span>.createRequest(url, method);</span><br><span class="line">            <span class="keyword">if</span> (requestCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                requestCallback.doWithRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            response = request.execute();</span><br><span class="line">            <span class="keyword">this</span>.handleResponse(url, method, response);</span><br><span class="line">            var14 = responseExtractor != <span class="keyword">null</span> ? responseExtractor.extractData(response) : <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var12) &#123;</span><br><span class="line">            String resource = url.toString();</span><br><span class="line">            String query = url.getRawQuery();</span><br><span class="line">            resource = query != <span class="keyword">null</span> ? resource.substring(<span class="number">0</span>, resource.indexOf(<span class="number">63</span>)) : resource;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ResourceAccessException(<span class="string">"I/O error on "</span> + method.name() + <span class="string">" request for \""</span> + resource + <span class="string">"\": "</span> + var12.getMessage(), var12);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var14;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>继续：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(URI url, HttpMethod method, ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ResponseErrorHandler errorHandler = <span class="keyword">this</span>.getErrorHandler();</span><br><span class="line">        <span class="keyword">boolean</span> hasError = errorHandler.hasError(response);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.debug(method.name() + <span class="string">" request for \""</span> + url + <span class="string">"\" resulted in "</span> + response.getRawStatusCode() + <span class="string">" ("</span> + response.getStatusText() + <span class="string">")"</span> + (hasError ? <span class="string">"; invoking error handler"</span> : <span class="string">""</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var7) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">            errorHandler.handleError(url, method, response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>终于看到了想要的，可以看出 hasError 为 true，即有错误时，会走 errorHandler.handleError(url, method, response)，接下来继续查看这个 errorHandler 的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResponseErrorHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasError</span><span class="params">(ClientHttpResponse var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleError</span><span class="params">(ClientHttpResponse var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(URI url, HttpMethod method, ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handleError(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个接口，我们点进它的实现类 DefaultResponseErrorHandler 的 handleError()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpStatus statusCode = HttpStatus.resolve(response.getRawStatusCode());</span><br><span class="line">        <span class="keyword">if</span> (statusCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownHttpStatusCodeException(response.getRawStatusCode(), response.getStatusText(), response.getHeaders(), <span class="keyword">this</span>.getResponseBody(response), <span class="keyword">this</span>.getCharset(response));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleError(response, statusCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>继续往下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(ClientHttpResponse response, HttpStatus statusCode)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(statusCode.series()) &#123;</span><br><span class="line">        <span class="keyword">case</span> CLIENT_ERROR:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpClientErrorException(statusCode, response.getStatusText(), response.getHeaders(), <span class="keyword">this</span>.getResponseBody(response), <span class="keyword">this</span>.getCharset(response));</span><br><span class="line">        <span class="keyword">case</span> SERVER_ERROR:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpServerErrorException(statusCode, response.getStatusText(), response.getHeaders(), <span class="keyword">this</span>.getResponseBody(response), <span class="keyword">this</span>.getCharset(response));</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownHttpStatusCodeException(statusCode.value(), response.getStatusText(), response.getHeaders(), <span class="keyword">this</span>.getResponseBody(response), <span class="keyword">this</span>.getCharset(response));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>可算找到原因了，原来在这里抛出了一个 HttpClientErrorException，既然 DefaultResponseErrorHandler 实现了 ResponseErrorHandler，而且从名字上看貌似是个默认的错误处理，那我们可以尝试自定义 ErrorHandler 实现 ResponseErrorHandler 来处理异常情况。</p><h3 id="自定义-ErrorHandler"><a href="#自定义-ErrorHandler" class="headerlink" title="自定义 ErrorHandler"></a>自定义 ErrorHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tryme.wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-12-03 11:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 远程调用自定义异常Handler</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestErrorHandler</span> <span class="keyword">extends</span> <span class="title">DefaultResponseErrorHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasError</span><span class="params">(ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 是否有错 返回false即手动设置了不管response是什么都没有错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 暂时空着</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别忘记配置进去：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.merrichat.im.common.handler.RestErrorHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.SimpleClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tryme.wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-11-30 10:59:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> http请求配置 （替代httpclient）</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(factory);</span><br><span class="line">        <span class="comment">// 使用自定义的ErrorHandler</span></span><br><span class="line">        restTemplate.setErrorHandler(<span class="keyword">new</span> RestErrorHandler());</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">simpleClientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        <span class="comment">// 单位：ms</span></span><br><span class="line">        factory.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 单位：ms</span></span><br><span class="line">        factory.setConnectTimeout(<span class="number">15000</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样无论服务端返回什么状态码，客户端都会认为没错，我们就可以获取想要的 statusCode 或者 body 进而来处理各种业务了😉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在使用 Spring Boot 的 RestTemplate 调用时，发现调用成功时很好用，但是服务器返回 4xx 或者 5xx 异常时，这货直接给抛出来了，想要处理可以自定义 ErrorHandler。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="https://tryme.wang/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 字段默认值的问题</title>
    <link href="https://tryme.wang/2019/01/mysql-column-default-value/"/>
    <id>https://tryme.wang/2019/01/mysql-column-default-value/</id>
    <published>2019-01-03T15:40:40.000Z</published>
    <updated>2019-01-04T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>使用 SQL 脚本创建表的时候，遇到了一个问题，SQL 脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table test</span><br><span class="line">(</span><br><span class="line">   ...</span><br><span class="line">   create_time          datetime not null default now() comment &apos;创建时间&apos;,</span><br><span class="line">   ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在为”create_time“字段设置默认值为当前时间时，SQL 执行报了一个错误如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[42000][1067] Invalid default value for &apos;create_time&apos;</span><br></pre></td></tr></table></figure><p>字段默认值无效的原因，查看了下当前的 MySQL 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+------------+</span><br><span class="line">| version()  |</span><br><span class="line">+------------+</span><br><span class="line">| 5.5.35-log |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>版本是 5.5 的。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>查看了 <a href="https://dev.mysql.com/doc/refman/5.5/en/data-type-defaults.html" target="_blank" rel="noopener">MySQL 5.5</a> 的文档，在 Data Type Default Values 这一段中有这么个描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">With one exception, the default value specified in a DEFAULT clause must be a literal constant; it cannot be a function or an expression. This means, for example, that you cannot set the default for a date column to be the value of a function such as NOW() or CURRENT_DATE. The exception is that, for a TIMESTAMP column, you can specify CURRENT_TIMESTAMP as the default. See Section 11.3.5, “Automatic Initialization and Updating for TIMESTAMP”. </span><br><span class="line">（除了一个例外，DEFAULT子句中指定的默认值必须是文字常量;它不能是一个功能或表达。这意味着，例如，您不能将日期列的默认值设置为函数的值，例如NOW（）或CURRENT_DATE。例外情况是，对于TIMESTAMP列，您可以将CURRENT_TIMESTAMP指定为默认值。请参见第11.3.5节“TIMESTAMP的自动初始化和更新”。）</span><br></pre></td></tr></table></figure><p>原因很明显了，DEFAULT 指定的默认值不能是 NOW() ，可以将 ”create_time“字段的类型改为 TIMESTAMP，再将默认值设为 CURRENT_TIMESTAMP 来使用。</p><p><strong>PS：</strong>MySQL 5.6/5.7 版本中，对于默认值的描述有所变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">With one exception, the default value specified in a DEFAULT clause must be a literal constant; it cannot be a function or an expression. This means, for example, that you cannot set the default for a date column to be the value of a function such as NOW() or CURRENT_DATE. The exception is that, for TIMESTAMP and DATETIME columns, you can specify CURRENT_TIMESTAMP as the default. See Section 11.3.5, “Automatic Initialization and Updating for TIMESTAMP and DATETIME”. </span><br><span class="line">（除了一个例外，DEFAULT子句中指定的默认值必须是文字常量;它不能是一个功能或表达。这意味着，例如，您不能将日期列的默认值设置为函数的值，例如NOW（）或CURRENT_DATE。例外情况是，对于TIMESTAMP和DATETIME列，您可以将CURRENT_TIMESTAMP指定为默认值。请参见第11.3.5节“TIMESTAMP和DATETIME的自动初始化和更新”。）</span><br></pre></td></tr></table></figure><p>可以看到，后续版本中 DATETIME 类型的字段也可以将 CURRENT_TIMESTAMP 设为默认值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;使用 SQL 脚本创建表的时候，遇到了一个问题，SQL 脚本如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="https://tryme.wang/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo 发布的服务和 AOP 无法共存的问题</title>
    <link href="https://tryme.wang/2019/01/dubbo-service-aop-conflict/"/>
    <id>https://tryme.wang/2019/01/dubbo-service-aop-conflict/</id>
    <published>2019-01-03T15:33:40.000Z</published>
    <updated>2019-01-04T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spring Boot 使用中遇到的问题总结，持续更新…</p></blockquote><h3 id="IDEA-中读取配置文件问题"><a href="#IDEA-中读取配置文件问题" class="headerlink" title="IDEA 中读取配置文件问题"></a>IDEA 中读取配置文件问题</h3><p>问题如图：<br><img src="https://wx4.sinaimg.cn/large/007jb4T5ly1fxrefyccolj30vq06smza.jpg" align="center" alt="image"><br>解决方案：<br>引入如下依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>此时会出现如下图：<br><img src="https://wx3.sinaimg.cn/large/007jb4T5ly1fxrem3cjo3j31dk06idin.jpg" align="center" alt="image"><br>可以直接忽略。</p><hr><h3 id="Tomcat-容器启动过慢的问题"><a href="#Tomcat-容器启动过慢的问题" class="headerlink" title="Tomcat 容器启动过慢的问题"></a>Tomcat 容器启动过慢的问题</h3><p>启动项目时，明明一个很简单的项目，却启动很慢，Tomcat 日志中有这么一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [20,617] milliseconds.</span><br></pre></td></tr></table></figure></p><p>启动成功耗时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO: Server startup in 33239 ms</span><br></pre></td></tr></table></figure></p><p>这个警告的操作耗了大半的启动时间，查阅 Tomcat 的<a href="https://wiki.apache.org/tomcat/HowTo/FasterStartUp" target="_blank" rel="noopener">wiki</a>发现这么一段话：<br><img src="https://wx1.sinaimg.cn/large/007jb4T5ly1fxtkl2jdatj31xs0iqwmv.jpg" align="center" alt="image"><br>解释得很清楚，Tomcat 启动时熵源的生成默认是 JRE 的阻塞式熵源（/ dev / random），替换为非阻塞式熵源（/ dev /./ urandom）即可，但是会降低安全性，因为获得的随机数据较少。<br>修改方式：<br>直接修改 $JAVA_HOME/jre/lib/security/java.security 中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">securerandom.source=file:/dev/./urandom</span><br></pre></td></tr></table></figure></p><p>或者直接执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar app.jar -Djava.security.egd=file:/dev/./urandom</span><br></pre></td></tr></table></figure></p><p>修改完再启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO: Server startup in 10847 ms</span><br></pre></td></tr></table></figure></p><p>效果还是很显著的😊。</p><hr><h3 id="静态变量的注入"><a href="#静态变量的注入" class="headerlink" title="静态变量的注入"></a>静态变量的注入</h3><p>日常开发中，一般常用的工具会抽取到工具类中，工具类中的方法一般都是静态调用的，方法中可能会注入其他成员变量，由于方法是 static 的，所以成员变量也必须是静态的。此时，使用 @Autowired 已经无法注入，此时就需要新的操作了😏。<br>首先，将需要使用的定义为静态变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static RestTemplate restTemplate;</span><br></pre></td></tr></table></figure></p><p>然后生成 set 方法并在方法上加 @Autowired（读取属性文件的话使用 @Value）注解（注意不要加 static）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">    public void setRestTemplate(RestTemplate restTemplate) &#123;</span><br><span class="line">        AuthTokenUtil.restTemplate = restTemplate;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后，类上加上 @Component注解即可。</p><hr><h3 id="RestTemplate-的-GET-请求的-Headers-设置"><a href="#RestTemplate-的-GET-请求的-Headers-设置" class="headerlink" title="RestTemplate 的 GET 请求的 Headers 设置"></a>RestTemplate 的 GET 请求的 Headers 设置</h3><h4 id="RestTemplate-介绍"><a href="#RestTemplate-介绍" class="headerlink" title="RestTemplate 介绍"></a>RestTemplate 介绍</h4><blockquote><p><strong>Spring’s central class for synchronous client-side HTTP access.</strong> It simplifies communication with HTTP servers, and enforces RESTful principles. It handles HTTP connections, leaving application code to provide URLs (with possible template variables) and extract results.</p><p>Spring 的同步客户端 HTTP 访问的中心类。它简化了与 HTTP 服务器的通信，并实施了 RESTful 原则。它处理 HTTP 连接，使应用程序代码提供 URL（带有可能的模板变量）并提取结果。</p></blockquote><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><ul><li>Spring Boot 版本 2.0.3.RELEASE</li><li>spring-web-5.0.7.RELEASE.jar 的 RestTemplate</li><li>RestTemplate 的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.SimpleClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tryme.wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-11-30 10:59:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> RestTemplate配置 </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(factory);</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">simpleClientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 默认情况下，RestTemplate依赖于标准JDK工具来建立HTTP连接。</span></span><br><span class="line"><span class="comment">         * 可以通过InterceptingHttpAccessor.setRequestFactory（org.springframework.http.client.ClientHttpRequestFactory）</span></span><br><span class="line"><span class="comment">         * 属性切换到使用不同的HTTP库，例如Apache HttpComponents，Netty和OkHttp。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        <span class="comment">// 单位：ms</span></span><br><span class="line">        factory.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// 单位：ms</span></span><br><span class="line">        factory.setConnectTimeout(<span class="number">15000</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>RestTemplate 使用时可能会有 Headers 中需要传入 token 之类参数的情况，使用 POST 请求时，RestTemplate 的 API 中有明显的方法postForEntity或postForObject：</p><p><img src="https://wx2.sinaimg.cn/large/007jb4T5ly1fy68yplwsxj31fu10qgs8.jpg" align="center" alt="image"></p><p>然而 GET 请求并没有明显可以理解的 API 使用，查阅资料发现了 exchange 方法可以指定 HTTP 请求方式：</p><p><img src="https://wx2.sinaimg.cn/large/007jb4T5ly1fy6979u3i3j31fo0x4n2l.jpg" align="center" alt="image"></p><p>ok，就它了，而且其他请求方式均可以使用这个来执行 Headers。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Spring Boot 使用中遇到的问题总结，持续更新…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;IDEA-中读取配置文件问题&quot;&gt;&lt;a href=&quot;#IDEA-中读取配置文件问题&quot; class=&quot;headerlink&quot; title=&quot;I
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring Boot" scheme="https://tryme.wang/tags/Spring-Boot/"/>
    
      <category term="Dubbo" scheme="https://tryme.wang/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Aria2&amp;AriaNG、OneIndex 配置</title>
    <link href="https://tryme.wang/2018/11/aria2-oneindex/"/>
    <id>https://tryme.wang/2018/11/aria2-oneindex/</id>
    <published>2018-11-24T09:38:16.000Z</published>
    <updated>2019-01-04T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Aria2-介绍"><a href="#Aria2-介绍" class="headerlink" title="Aria2 介绍"></a>Aria2 介绍</h2><blockquote><p>aria2 is a lightweight multi-protocol &amp; multi-source command-line download utility. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink. aria2 can be manipulated via built-in JSON-RPC and XML-RPC interfaces.    (from <a href="https://aria2.github.io" target="_blank" rel="noopener">https://aria2.github.io</a>)</p></blockquote><h2 id="安装-Aria2"><a href="#安装-Aria2" class="headerlink" title="安装 Aria2"></a>安装 Aria2</h2><p>下载脚本并运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</span><br></pre></td></tr></table></figure></p><p>运行脚本后会出现以下菜单选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> Aria2 一键安装管理脚本 [v1.1.9]</span><br><span class="line">  -- Toyo | doub.io/shell-jc4 --</span><br><span class="line">  </span><br><span class="line">  0. 升级脚本</span><br><span class="line">————————————</span><br><span class="line">  1. 安装 Aria2</span><br><span class="line">  2. 更新 Aria2</span><br><span class="line">  3. 卸载 Aria2</span><br><span class="line">————————————</span><br><span class="line">  4. 启动 Aria2</span><br><span class="line">  5. 停止 Aria2</span><br><span class="line">  6. 重启 Aria2</span><br><span class="line">————————————</span><br><span class="line">  7. 修改 配置文件</span><br><span class="line">  8. 查看 配置信息</span><br><span class="line">  9. 查看 日志信息</span><br><span class="line"> 10. 配置 自动更新 BT-Tracker服务器</span><br><span class="line">————————————</span><br><span class="line"></span><br><span class="line"> 当前状态: 已安装 并 已启动</span><br><span class="line"></span><br><span class="line"> 请输入数字 [0-10]:</span><br></pre></td></tr></table></figure></p><p>按提示操作即可。<br>PS:<br><strong>启动：</strong> /etc/init.d/aria2 start<br><strong>停止：</strong> /etc/init.d/aria2 stop<br><strong>当前状态：</strong> /etc/init.d/aria2 status<br><strong>配置文件路径：</strong> /root/.aria2/aria2.conf<br><strong>令牌密钥：</strong> 随机生成，可以更改<br><strong>下载目录：</strong>/usr/local/caddy/www/aria2/Download<br><code>来源：<a href="https://doub.io/shell-jc4/" target="_blank" rel="noopener">逗比教程</a></code></p><hr><h2 id="安装-AriaNG"><a href="#安装-AriaNG" class="headerlink" title="安装 AriaNG"></a>安装 AriaNG</h2><blockquote><p>由于 Aria2 是一个命令行下载工具，每次使用敲命令下载文件不方便，有大佬开发出的开源 WEB 面板来管理下载任务。其中之一便是 <a href="https://github.com/mayswind/AriaNg" target="_blank" rel="noopener">AriaNG</a>。<br>AriaNG 只是一个 WEB 端的管理面板，可以远程连接 Aria2，二者可以分处不同服务器。</p></blockquote><p>直接从 <a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener">GitHub</a> 项目主页下载解压到服务器即可，此时即可通过 IP 或配置好的域名进行访问。<br>具体效果可访问 <code><a href="http://aria2.tryme.wang" target="_blank" rel="noopener">http://aria2.tryme.wang</a></code>查看</p><hr><h2 id="安装-OneIndex"><a href="#安装-OneIndex" class="headerlink" title="安装 OneIndex"></a>安装 OneIndex</h2><p>可以使用宝塔面板新建网站，全程 WEB 面板操作，简单粗暴。安装参考：<a href="https://bt.cn" target="_blank" rel="noopener">宝塔</a><br>OneIndex 项目主页：<a href="https://github.com/donwa/oneindex" target="_blank" rel="noopener">https://github.com/donwa/oneindex</a><br><img src="https://ws2.sinaimg.cn/large/007jb4T5ly1fx7n9vix1aj30me0j0t9u.jpg" align="center" alt="image"><br>下载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/donwa/oneindex.git</span><br></pre></td></tr></table></figure></p><p>移动到网站根目录后要分配权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 ./config &amp;&amp; chmod 777 ./cache</span><br></pre></td></tr></table></figure></p><p>此时根据配置的域名，访问 <code> <a href="http://xxx.com/?/admin" target="_blank" rel="noopener">http://xxx.com/?/admin</a></code>，默认的密码是  <code>oneindex</code>，按照提示配置即可。<br>PS：可以配置 Nginx 伪静态去掉管理页面 URL 中的“?”，伪静态配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">    rewrite / /?/ last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="配置-Aria2-下载后自动上传"><a href="#配置-Aria2-下载后自动上传" class="headerlink" title="配置 Aria2 下载后自动上传"></a>配置 Aria2 下载后自动上传</h2><p>新建一个脚本文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /root/.aria2/oneindexup.sh</span><br></pre></td></tr></table></figure></p><p>复制以下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">path=<span class="variable">$3</span> <span class="comment">#取原始路径，我的环境下如果是单文件则为/data/demo.png,如果是文件夹则该值为文件夹内某个文件比如/data/a/b/c/d.jpg</span></span><br><span class="line">downloadpath=<span class="string">'/usr/local/caddy/www/aria2/Download'</span>  <span class="comment">#修改成Aria2下载文件夹</span></span><br><span class="line">domain=<span class="string">'tryme.wang'</span>  <span class="comment">#修改成自己域名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$2</span> -eq 0 ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span>  <span class="comment">#提取下载文件根路径，如把/data/a/b/c/d.jpg变成/data/a</span></span><br><span class="line">filepath=<span class="variable">$path</span></span><br><span class="line">path=<span class="variable">$&#123;path%/*&#125;</span>; </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$path</span>"</span> = <span class="string">"<span class="variable">$downloadpath</span>"</span> ] &amp;&amp; [ <span class="variable">$2</span> -eq 1 ]  <span class="comment">#如果下载的是单个文件</span></span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    php /www/wwwroot/<span class="variable">$domain</span>/one.php upload:file <span class="variable">$filepath</span> /<span class="variable">$folder</span>/</span><br><span class="line">    rm -rf <span class="variable">$filepath</span></span><br><span class="line">    php /www/wwwroot/<span class="variable">$domain</span>/one.php cache:refresh</span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$path</span>"</span> = <span class="string">"<span class="variable">$downloadpath</span>"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    php /www/wwwroot/<span class="variable">$domain</span>/one.php upload:folder <span class="variable">$filepath</span> /<span class="variable">$folder</span>/</span><br><span class="line">    rm -rf <span class="string">"<span class="variable">$filepath</span>/"</span></span><br><span class="line">    php /www/wwwroot/<span class="variable">$domain</span>/one.php cache:refresh</span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>给脚本分配可执行权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /root/.aria2/oneindexup.sh</span><br></pre></td></tr></table></figure></p><p>最后写入配置文件，即上面安装 Aria2 时的配置文件 <code>/root/.aria2/aria2.conf</code><br>编辑配置文件或者直接命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"on-download-complete=/root/.aria2/oneindexup.sh"</span> &gt;&gt;/root/.aria2/aria2.conf</span><br></pre></td></tr></table></figure></p><p><code>参考自：<a href="https://www.moerats.com/archives/700/" target="_blank" rel="noopener">Rat‘s大佬</a></code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Aria2-介绍&quot;&gt;&lt;a href=&quot;#Aria2-介绍&quot; class=&quot;headerlink&quot; title=&quot;Aria2 介绍&quot;&gt;&lt;/a&gt;Aria2 介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;aria2 is a lightweight multi-prot
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="工具" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Aria2" scheme="https://tryme.wang/tags/Aria2/"/>
    
      <category term="OneIndex" scheme="https://tryme.wang/tags/OneIndex/"/>
    
  </entry>
  
  <entry>
    <title>Openfire 集成已有数据库用户</title>
    <link href="https://tryme.wang/2018/11/openfire-database/"/>
    <id>https://tryme.wang/2018/11/openfire-database/</id>
    <published>2018-11-24T09:37:15.000Z</published>
    <updated>2019-01-04T01:47:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Openfire 安装完成后，后台会默认在指定的数据库中生成 of* 等许多表，但是实际开发中往往需要集成已有的数据库表，可以通过更改系统属性来实现（用户认证，不包含群组）。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，业务系统中需存在用户认证相关信息表以便集成。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> im_user</span><br><span class="line">(</span><br><span class="line">member_id <span class="built_in">bigint</span> <span class="literal">null</span>,</span><br><span class="line">mobile <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="literal">null</span>,</span><br><span class="line">email <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="literal">null</span>,</span><br><span class="line">username <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="literal">null</span>,</span><br><span class="line">create_time <span class="keyword">timestamp</span> <span class="literal">null</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="更改-ofproperty-表"><a href="#更改-ofproperty-表" class="headerlink" title="更改 ofproperty 表"></a>更改 ofproperty 表</h2><p>系统默认验证类：<br><img src="https://wx1.sinaimg.cn/large/007jb4T5ly1fwh86yvbbyj31ie07i40l.jpg" alt="image" style="display:block;margin:0 auto;"><br>Openfire 提供了 MySQL 数据库的验证类，路径为 org.jivesoftware.openfire.auth.JDBCAuthProvider，以及用户相关的操作类org.jivesoftware.openfire.user.JDBCUserProvider，我们可以通过新建相关属性、更改验证方式和用户相关操作来达到使用已有 MySQL 数据库表的目的。</p><p>执行以下 SQL 语句新建系统属性（同样可以在管理页面操作）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`myopenfire`</span>.ofproperty(<span class="keyword">name</span>,propValue)<span class="keyword">values</span></span><br><span class="line">(<span class="string">'admin.authorizedJIDs'</span>,<span class="string">'admin@localhost'</span>),</span><br><span class="line">(<span class="string">'jdbcProvider.driver'</span>,<span class="string">'com.mysql.jdbc.Driver'</span>),</span><br><span class="line">(<span class="string">'jdbcProvider.connectionString'</span>,<span class="string">'jdbc:mysql://192.168.53.61:3306/myopenfire?user=test&amp;password=test&amp;rewriteBatchedStatements=true&amp;useUnicode=true&amp;characterEncoding=utf8'</span>),</span><br><span class="line">(<span class="string">'jdbcAuthProvider.passwordSQL'</span>,<span class="string">'SELECT password FROM im_user WHERE mobile=?'</span>),</span><br><span class="line">(<span class="string">'jdbcAuthProvider.passwordType'</span>,<span class="string">'plain'</span>),</span><br><span class="line">(<span class="string">'jdbcUserProvider.loadUserSQL'</span>,<span class="string">'SELECT username,email FROM im_user WHERE mobile=?'</span>),</span><br><span class="line">(<span class="string">'jdbcUserProvider.userCountSQL'</span>,<span class="string">'SELECT COUNT(*) FROM im_user'</span>),</span><br><span class="line">(<span class="string">'jdbcUserProvider.allUsersSQL'</span>,<span class="string">'SELECT username FROM im_user'</span>),</span><br><span class="line">(<span class="string">'jdbcUserProvider.usernameField'</span>,<span class="string">'username'</span>),</span><br><span class="line">(<span class="string">'jdbcUserProvider.nameField'</span>,<span class="string">'mobile'</span>),</span><br><span class="line">(<span class="string">'jdbcUserProvider.emailField'</span>,<span class="string">'email'</span>);</span><br></pre></td></tr></table></figure></p><p>将系统属性更改为以上两个类即可。</p><blockquote><p>admin.authorizedJIDs 属性即管理员账户名称，@ 后是初始配置的域，必须带上，并且 im_user 表中必须有 admin 相关的验证信息才能登录管理页面。</p></blockquote><p>参考：<a href="http://download.igniterealtime.org/openfire/docs/latest/documentation/db-integration-guide.html" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Openfire 安装完成后，后台会默认在指定的数据库中生成 of* 等许多表，但是实际开发中往往需要集成已有的数据库表，可以通过更改系统属性来实现（用户认证，不包含群组）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IDEA" scheme="https://tryme.wang/tags/IDEA/"/>
    
      <category term="Openfire" scheme="https://tryme.wang/tags/Openfire/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 导入 Openfire 源码</title>
    <link href="https://tryme.wang/2018/11/import-openfire-source/"/>
    <id>https://tryme.wang/2018/11/import-openfire-source/</id>
    <published>2018-11-24T09:35:12.000Z</published>
    <updated>2019-01-04T01:47:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Openfire 是一个是一个 IM（即时通讯）服务器，使用 Java 编写的 XMPP 服务器，开发过程 Intellij IDEA 导入 Openfire 源码步骤比较复杂，记录一下。</p></blockquote><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>从 GitHub 项目主页<a href="https://github.com/igniterealtime/Openfire" target="_blank" rel="noopener">下载</a>源码或者从官网<a href="https://www.igniterealtime.org/projects/openfire/" target="_blank" rel="noopener">下载</a>。</p><hr><h2 id="导入到-IDEA-中"><a href="#导入到-IDEA-中" class="headerlink" title="导入到 IDEA 中"></a>导入到 IDEA 中</h2><h3 id="选择-Import-Project"><a href="#选择-Import-Project" class="headerlink" title="选择 Import Project"></a>选择 Import Project</h3><p><img src="https://ws3.sinaimg.cn/large/007jb4T5ly1fwh4u917jfj30lu0keq3s.jpg" alt="image" style="display:block;margin:0 auto;"><br>一路next即可导入成功。</p><h3 id="进行构建"><a href="#进行构建" class="headerlink" title="进行构建"></a>进行构建</h3><p>注意：由于需要 ant 相关 jar 包，可以<a href="https://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">下载</a>之后，将 ant.jar 导入到 $JAVA_HOME/jre/lib 目录下即可。<br><img src="https://ws1.sinaimg.cn/large/007jb4T5ly1fwh59sa2qrj31j80os44v.jpg" alt="image" style="display:block;margin:0 auto;"><br>添加之后进行编译报错：<br><img src="https://ws3.sinaimg.cn/large/007jb4T5ly1fwh5amisywj31as0k0acw.jpg" style="display:block;margin:0 auto;"><br>解决：配置 JDK<br><img src="https://wx2.sinaimg.cn/large/007jb4T5ly1fwh5e3ra57j31h20ligpd.jpg" alt="image" style="display:block;margin:0 auto;"></p><p>配置 application<br> <img src="https://ws4.sinaimg.cn/large/007jb4T5ly1fwh5fgxstfj31t4188tdw.jpg" alt="image" style="display:block;margin:0 auto;"></p><h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><p>成功启动后进入 <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> 页面报错如下：<br><img src="https://ws3.sinaimg.cn/large/007jb4T5ly1fwh5gy3gm6j31a00ziwrr.jpg" alt="image" style="display:block;margin:0 auto;"><br>解决：将 $OPENFIRE_HOME/src/resources/jar/admin-sidebar.xml及$OPENFIRE_HOME/resources/i18n 下所有文件拷贝到输出目录。<br><img src="https://wx4.sinaimg.cn/large/007jb4T5ly1fwh5me9vf7j317m0i0acs.jpg" alt="image" style="display:block;margin:0 auto;"><br><img src="https://ws1.sinaimg.cn/large/007jb4T5ly1fwh5mreoutj30yq0k4q6b.jpg" alt="image" style="display:block;margin:0 auto;"><br>输出目录：<br><img src="https://ws1.sinaimg.cn/large/007jb4T5ly1fwh5namvjsj319w0k2q72.jpg" alt="image" style="display:block;margin:0 auto;"><br>再次启动即可进入初始化配置页面。</p><h3 id="管理页面配置"><a href="#管理页面配置" class="headerlink" title="管理页面配置"></a>管理页面配置</h3><p>根据提示配置即可。<br><img src="https://ws4.sinaimg.cn/large/007jb4T5ly1fwh729eol1j31y00yuwj2.jpg" alt="image" style="display:block;margin:0 auto;"><br><img src="https://wx2.sinaimg.cn/large/007jb4T5ly1fwh72p0gioj318c0l0whe.jpg" alt="image" style="display:block;margin:0 auto;"><br><img src="https://ws4.sinaimg.cn/large/007jb4T5ly1fwh73l1dxmj31hc0p443e.jpg" alt="image" style="display:block;margin:0 auto;"><br><img src="https://wx4.sinaimg.cn/large/007jb4T5ly1fwh73xkewoj31w20hiade.jpg" alt="image" style="display:block;margin:0 auto;"></p><p>至此，IDEA 导入 Openfire 源码完成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Openfire 是一个是一个 IM（即时通讯）服务器，使用 Java 编写的 XMPP 服务器，开发过程 Intellij IDEA 导入 Openfire 源码步骤比较复杂，记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;下载源
      
    
    </summary>
    
      <category term="技术" scheme="https://tryme.wang/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="IDEA" scheme="https://tryme.wang/tags/IDEA/"/>
    
      <category term="Openfire" scheme="https://tryme.wang/tags/Openfire/"/>
    
  </entry>
  
  <entry>
    <title>安装 RSS 服务 Tiny Tiny RSS</title>
    <link href="https://tryme.wang/2018/11/install-ttrss/"/>
    <id>https://tryme.wang/2018/11/install-ttrss/</id>
    <published>2018-11-24T09:33:42.000Z</published>
    <updated>2019-01-17T07:41:26.082Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>RSS 已经逐渐没落，被如今大数据信息流，推荐算法所取代。如今虽然用的人比较少，但是好在没那么多烦人的“专属广告”及宣称“千人千面”的🌶🐔算法推荐。虽然有很多 RSS 提供商，例如 Feedly、Inoreader等，也各有免费的方案，但是好的服务终究是走向了付费时代。本文主要介绍 Docker 下安装 Tiny Tiny RSS 的方法及开启 HTTPS 支持，Docker 可以理解为一种宿主机上的完全隔离的容器，安装卸载容器内的东西完全不影响宿主机。</p></blockquote><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="安装-Docker-环境"><a href="#安装-Docker-环境" class="headerlink" title="安装 Docker 环境"></a>安装 Docker 环境</h3><p>执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://get.docker.io/ | sh</span><br></pre></td></tr></table></figure></p><p>如果主机位于国内，可以切换为国内镜像安装脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure></p><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>参考 <a href="https://github.com/HenryQW/docker-ttrss-plugins" target="_blank" rel="noopener">HenryQW</a> 的方法通过 docker-compose 部署，需要安装 docker-compose 命令，一步步执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install epel-release</span><br><span class="line">$ yum -y install python-pip</span><br><span class="line">$ pip install docker-compose</span><br></pre></td></tr></table></figure></p><p>docker-compose.yml 内容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="string">database.postgres:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">sameersbn/postgresql:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PG_PASSWORD=tt-rss</span> <span class="comment"># please change the password</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DB_EXTENSION=pg_trgm</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  rss:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">wangqiru/ttrss:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">ttrss</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">181</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SELF_URL_PATH=https://rss.tryme.wang/</span> <span class="comment"># please change to your own domain, keep https there and no port for https support later</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DB_HOST=database.postgres</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DB_PORT=5432</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DB_NAME=ttrss</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DB_USER=postgres</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DB_PASS=tt-rss</span> <span class="comment"># please change the password</span></span><br><span class="line"><span class="attr">    stdin_open:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    tty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">sh</span> <span class="bullet">-c</span> <span class="string">'sh /wait-for database.postgres:5432 -- php /configure-db.php &amp;&amp; exec s6-svscan /etc/s6/'</span></span><br></pre></td></tr></table></figure></p><p>在 docker-compose.yml 目录下执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>等待部署完成。</p><h3 id="Nginx-HTTPS-支持"><a href="#Nginx-HTTPS-支持" class="headerlink" title="Nginx HTTPS 支持"></a>Nginx HTTPS 支持</h3><p>添加 Nginx yum 资源库；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>使用 yum 命令安装 Nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y nginx</span><br></pre></td></tr></table></figure></p><p>启动 Nginx：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service nginx start</span><br></pre></td></tr></table></figure></p><p>这时访问即可看到“Welcome to Nginx”欢迎页。</p><blockquote><p>使用 <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’sEncrypt</a> 提供的免费 HTTPS 证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dl.eff.org/certbot-auto</span><br><span class="line">$ chmod a+x ./certbot-auto</span><br><span class="line">$ certbot-auto</span><br></pre></td></tr></table></figure></p></blockquote><p>根据提示生成即可。<br>编辑/etc/nginx/conf.d/ttrss.conf（没有的话手动创建），保存如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">upstream ttrssdev &#123;</span><br><span class="line">  server 127.0.0.1:181;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name rss.tryme.wang;</span><br><span class="line">    <span class="comment">#return 301 https://rss.tryme.wang$request_uri;</span></span><br><span class="line">    rewrite ^(.*)$ https://<span class="variable">$host</span><span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    gzip on;</span><br><span class="line">    server_name rss.tryme.wang;</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/rss.tryme.wang/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/rss.tryme.wang/privkey.pem;</span><br><span class="line">    access_log /var/<span class="built_in">log</span>/nginx/ttrssdev_access.log combined;</span><br><span class="line">    error_log /var/<span class="built_in">log</span>/nginx/ttrssdev_error.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_pass http://ttrssdev;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Ssl on;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        proxy_set_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">        client_max_body_size 100m;</span><br><span class="line">        client_body_buffer_size 128k;</span><br><span class="line">        proxy_buffer_size 4k;</span><br><span class="line">        proxy_buffers 4 32k;</span><br><span class="line">        proxy_busy_buffers_size 64k;</span><br><span class="line">        proxy_temp_file_write_size 64k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>确保/etc/nginx/nginx.conf主配置文件http块里有“include /etc/nginx/conf.d/*.conf;”<br>验证并更新 Nginx 配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -t</span><br><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure></p></blockquote><p>这是直接访问 <a href="https://rss.tryme.wang" target="_blank" rel="noopener">https://rss.tryme.wang</a> 即可看到登录页面，默认用户名 admin，密码 password，建议立即修改默认密码！</p><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>GCP 的机器直接访问域名的时候 Nginx 的错误日志可能会出现下面问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*33 connect() to 127.0.0.1:181 failed (13: Permission denied) while connecting to upstream</span><br></pre></td></tr></table></figure></p><blockquote><p>解决方案参考 <a href="https://my.oschina.net/zk875/blog/823710" target="_blank" rel="noopener">地址</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;RSS 已经逐渐没落，被如今大数据信息流，推荐算法所取代。如今虽然用的人比较少，但是好在没那么多烦人的“专属广告”及宣称“千人千面”的🌶🐔算法推荐。虽然有很多 RSS 提供商，例如 Feedly、Inoreader等，也各有免费的方案，但是好的
      
    
    </summary>
    
      <category term="工具" scheme="https://tryme.wang/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="RSS" scheme="https://tryme.wang/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>Typecho 加密文章显示标题</title>
    <link href="https://tryme.wang/2018/11/typecho-encrypt-show-title/"/>
    <id>https://tryme.wang/2018/11/typecho-encrypt-show-title/</id>
    <published>2018-11-24T09:31:37.000Z</published>
    <updated>2019-01-04T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Typecho 的文章可以加密，但是加密的文章标题默认显示的是“此内容被密码保护”，什么文章都不知道😶，不过还好可以更改配置。 </p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在 $SITE_HOME/var/Widget/Abstract/Contents.php 文件的如图位置： <img src="https://ws3.sinaimg.cn/large/007jb4T5ly1fxyd2v50mpj31c40ekwh4.jpg" align="center" alt="image"></p><p>将 <code>$value[‘title’] = _t(‘此内容被密码保护’)</code> 注释掉即可，当然，也可以修改上面的 <code>请输入密码以访问</code> 和 <code>提交</code> 为自定义内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Typecho 的文章可以加密，但是加密的文章标题默认显示的是“此内容被密码保护”，什么文章都不知道😶，不过还好可以更改配置。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="工具" scheme="https://tryme.wang/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Typecho" scheme="https://tryme.wang/tags/Typecho/"/>
    
  </entry>
  
  <entry>
    <title>Typecho 文章支持 emoji</title>
    <link href="https://tryme.wang/2018/11/typecho-support-emoji/"/>
    <id>https://tryme.wang/2018/11/typecho-support-emoji/</id>
    <published>2018-11-24T09:31:37.000Z</published>
    <updated>2019-01-04T01:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在 MySQL 数据库中，我们常用的 utf-8 格式编码最多支持 3 个字节，而 emoji 表情是 4 个字节的符号，所以 emoji 表情的长度就超出了我们常用 utf-8 的字符集范围而无法存储。从 MySQL5.5 开始，可以更改数据库和数据表的编码为 utf8mb4 使其支持存储 emoji，utf8mb4 兼容 utf8，且比 utf8 能表示更多的字符，是 utf8 字符集的超集。<br>修改之前一定要备份数据！修改之前一定要备份数据！修改之前一定要备份数据！</p></blockquote><h4 id="1-更改数据库的排序规则"><a href="#1-更改数据库的排序规则" class="headerlink" title="1. 更改数据库的排序规则"></a>1. 更改数据库的排序规则</h4><p><img src="https://wx3.sinaimg.cn/large/007jb4T5ly1fvfzrk6j8ij31yq10fain.jpg" alt="order-rule"></p><h4 id="2-点击-SQL-按钮，执行以下-SQL-语句-将-Typecho-修改为自己对应的前缀"><a href="#2-点击-SQL-按钮，执行以下-SQL-语句-将-Typecho-修改为自己对应的前缀" class="headerlink" title="2. 点击 SQL 按钮，执行以下 SQL 语句(将 Typecho 修改为自己对应的前缀)"></a>2. 点击 SQL 按钮，执行以下 SQL 语句(将 Typecho 修改为自己对应的前缀)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_comments <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_unicode_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_contents <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_unicode_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_fields <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_unicode_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_metas <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_unicode_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_options <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_unicode_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_relationships <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_unicode_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_users <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>修改完之后：<br><img src="https://ws4.sinaimg.cn/large/007jb4T5ly1fvg105ehbxj31ec0mo11c.jpg" alt="after-modified"></p><h4 id="3-编辑网站根目录的-config-inc-php-文件，文件末尾"><a href="#3-编辑网站根目录的-config-inc-php-文件，文件末尾" class="headerlink" title="3. 编辑网站根目录的 config.inc.php 文件，文件末尾"></a>3. 编辑网站根目录的 config.inc.php 文件，文件末尾</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 定义数据库参数 */</span></span><br><span class="line">$db = <span class="keyword">new</span> Typecho_Db(<span class="string">'Pdo_Mysql'</span>, <span class="string">'typecho_'</span>);</span><br><span class="line">$db-&gt;addServer(<span class="keyword">array</span> (</span><br><span class="line">  <span class="string">'host'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">  <span class="string">'user'</span> =&gt; <span class="string">'username'</span>,</span><br><span class="line">  <span class="string">'password'</span> =&gt; <span class="string">'password'</span>,</span><br><span class="line">  <span class="string">'charset'</span> =&gt; <span class="string">'utf8mb4'</span>,<span class="comment">// 将utf-8修改为utf8mb4</span></span><br><span class="line">  <span class="string">'port'</span> =&gt; <span class="string">'3306'</span>,</span><br><span class="line">  <span class="string">'database'</span> =&gt; <span class="string">'database-name'</span>,</span><br><span class="line">), Typecho_Db::READ | Typecho_Db::WRITE);</span><br><span class="line">Typecho_Db::set($db);</span><br></pre></td></tr></table></figure><p>按照以上步骤修改完之后，文章即可支持 emoji 表情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在 MySQL 数据库中，我们常用的 utf-8 格式编码最多支持 3 个字节，而 emoji 表情是 4 个字节的符号，所以 emoji 表情的长度就超出了我们常用 utf-8 的字符集范围而无法存储。从 MySQL5.5 开始，可以更改数据库和
      
    
    </summary>
    
      <category term="工具" scheme="https://tryme.wang/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Typecho" scheme="https://tryme.wang/tags/Typecho/"/>
    
  </entry>
  
</feed>
